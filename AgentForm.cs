using System;
using System.Drawing;
using System.Windows.Forms;
using System.Threading.Tasks;
using System.IO; // Added for file operations
using System.Text.Json; // Added for JSON serialization/deserialization

namespace BitcoinFinder
{
    public partial class AgentForm : Form
    {
        private AgentController? agentController;
        private System.Windows.Forms.Timer? autosaveTimer;
        private bool isFormDisposed = false;
        private bool isLoadingConfig = false;

        // UI —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        private TextBox txtServerIp;
        private TextBox txtServerPort;
        private Button btnConnect;
        private Label lblConnectionStatus;
        private TextBox txtAgentLog;
        private ListBox listBoxTasks;
        private Label lblAgentStatus;
        private ProgressBar progressBar;
        private Label lblProgress;
        private Label lblSpeed;
        private Label lblCurrentTask;
        private Button btnClearLog;
        private Button btnCheckPort;
        private NumericUpDown numThreads;
        private TextBox txtAgentName;
        private MaskedTextBox txtServerIpMasked;
        private NumericUpDown numServerPort;
        private const string ConfigFile = "agent_config.json";

        public AgentForm()
        {
            // –¶–≤–µ—Ç–∞ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π –ø–∞—Å—Ç–µ–ª—å–Ω–æ–π —Ç–µ–º—ã
            Color pastelBlue = Color.FromArgb(230, 240, 255);
            Color pastelGreen = Color.FromArgb(220, 255, 230);
            Color pastelRed = Color.FromArgb(255, 230, 230);
            Color pastelGray = Color.FromArgb(245, 245, 250);
            Color pastelAccent = Color.FromArgb(220, 230, 255);
            Color pastelYellow = Color.FromArgb(255, 255, 220);
            Color pastelBorder = Color.FromArgb(210, 220, 230);

            var toolTip = new ToolTip();

            InitializeComponent();

            // ToolTip —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
            if (btnConnect != null)
                toolTip.SetToolTip(btnConnect, "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è/–æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
            if (btnCheckPort != null)
                toolTip.SetToolTip(btnCheckPort, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞");
            if (txtServerIpMasked != null)
                toolTip.SetToolTip(txtServerIpMasked, "IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞");
            if (numServerPort != null)
                toolTip.SetToolTip(numServerPort, "–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞");
            if (txtAgentName != null)
                toolTip.SetToolTip(txtAgentName, "–ò–º—è –∞–≥–µ–Ω—Ç–∞");
            if (numThreads != null)
                toolTip.SetToolTip(numThreads, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –∞–≥–µ–Ω—Ç–∞");

            // –¶–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            btnConnect.FlatStyle = FlatStyle.Flat;
            btnConnect.BackColor = pastelGreen;
            btnConnect.ForeColor = Color.DarkGreen;
            btnConnect.Font = new Font("Segoe UI", 11F, FontStyle.Bold);
            btnConnect.FlatAppearance.BorderColor = pastelBorder;
            btnConnect.FlatAppearance.BorderSize = 1;
            btnConnect.Text = "üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è";
            btnConnect.Height = 40;

            // –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
            btnCheckPort.FlatStyle = FlatStyle.Flat;
            btnCheckPort.BackColor = pastelBlue;
            btnCheckPort.ForeColor = Color.Navy;
            btnCheckPort.Font = new Font("Segoe UI", 9F, FontStyle.Bold);
            btnCheckPort.FlatAppearance.BorderColor = pastelBorder;
            btnCheckPort.FlatAppearance.BorderSize = 1;

            // –°—Ç–∏–ª—å –¥–ª—è –ª–æ–≥–æ–≤
            txtAgentLog.BackColor = Color.FromArgb(30, 30, 30);
            txtAgentLog.ForeColor = Color.FromArgb(180, 255, 180);
            txtAgentLog.Font = new Font("Consolas", 10F);
            txtAgentLog.BorderStyle = BorderStyle.FixedSingle;

            // –°—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            progressBar.Height = 30;
            progressBar.ForeColor = Color.FromArgb(120, 200, 120);
            progressBar.BackColor = pastelGray;

            // –°—Ç–∏–ª—å –¥–ª—è GroupBox
            this.BackColor = pastelGray;

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
            this.Text = "ü§ñ Bitcoin Finder Agent";
            this.Font = new Font("Segoe UI", 11F);

            // –¶–≤–µ—Ç–∞ –¥–ª—è –ª–µ–π–∞—É—Ç–æ–≤ –∏ –ø–∞–Ω–µ–ª–µ–π
            // (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI –Ω–∏–∂–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)

            LoadAgentConfig();

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞!)
            txtServerIp.TextChanged += (s, e) => 
            {
                if (!isFormDisposed && !this.IsDisposed && !isLoadingConfig)
                {
                    SaveAgentConfig();
                    AddLog("IP —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω");
                }
            };
            txtServerPort.TextChanged += (s, e) => 
            {
                if (!isFormDisposed && !this.IsDisposed && !isLoadingConfig)
                {
                    SaveAgentConfig();
                    AddLog("–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω");
                }
            };
            txtAgentName.TextChanged += (s, e) => 
            {
                if (!isFormDisposed && !this.IsDisposed && !isLoadingConfig)
                {
                    SaveAgentConfig();
                    AddLog("–ò–º—è –∞–≥–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ");
                }
            };
            numThreads.ValueChanged += (s, e) => 
            {
                if (!isFormDisposed && !this.IsDisposed && !isLoadingConfig)
                {
                    SaveAgentConfig();
                    AddLog($"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {numThreads.Value}");
                }
            };

            // –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            autosaveTimer = new System.Windows.Forms.Timer();
            autosaveTimer.Interval = 10000; // 10 —Å–µ–∫—É–Ω–¥
            autosaveTimer.Tick += (s, e) => 
            {
                if (!isFormDisposed && !this.IsDisposed)
                {
                    SaveAgentConfig();
                }
            };
            autosaveTimer.Start();
        }

        private void InitializeComponent()
        {
            this.Size = new Size(1200, 800);
            this.Text = "Bitcoin Finder - –†–µ–∂–∏–º –∞–≥–µ–Ω—Ç–∞";
            this.StartPosition = FormStartPosition.CenterScreen;
            this.MinimumSize = new Size(1000, 600);

            var mainLayout = new TableLayoutPanel();
            mainLayout.Dock = DockStyle.Fill;
            mainLayout.ColumnCount = 2;
            mainLayout.RowCount = 4;
            mainLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 40F));
            mainLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 60F));
            mainLayout.RowStyles.Add(new RowStyle(SizeType.AutoSize)); // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            mainLayout.RowStyles.Add(new RowStyle(SizeType.AutoSize)); // –°—Ç–∞—Ç—É—Å
            mainLayout.RowStyles.Add(new RowStyle(SizeType.Percent, 50F)); // –ó–∞–¥–∞–Ω–∏—è
            mainLayout.RowStyles.Add(new RowStyle(SizeType.Percent, 50F)); // –õ–æ–≥

            // === –°–ï–ö–¶–ò–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===
            var connectionGroup = new GroupBox();
            connectionGroup.Text = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É";
            connectionGroup.Font = new Font("Segoe UI", 11F, FontStyle.Bold);
            connectionGroup.Dock = DockStyle.Fill;

            var connectionLayout = new TableLayoutPanel();
            connectionLayout.Dock = DockStyle.Fill;
            connectionLayout.ColumnCount = 4;
            connectionLayout.RowCount = 3; // Increased row count for new controls
            connectionLayout.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));
            connectionLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 30F));
            connectionLayout.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));
            connectionLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 40F));

            // IP —Å–µ—Ä–≤–µ—Ä–∞ (TextBox)
            connectionLayout.Controls.Add(new Label { Text = "IP —Å–µ—Ä–≤–µ—Ä–∞:", Font = new Font("Segoe UI", 10F), TextAlign = ContentAlignment.MiddleRight }, 0, 0);
            txtServerIp = new TextBox { Text = "127.0.0.1", Font = new Font("Segoe UI", 10F), Dock = DockStyle.Fill };
            connectionLayout.Controls.Add(txtServerIp, 1, 0);

            // –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ (TextBox)
            connectionLayout.Controls.Add(new Label { Text = "–ü–æ—Ä—Ç:", Font = new Font("Segoe UI", 10F), TextAlign = ContentAlignment.MiddleRight }, 2, 0);
            txtServerPort = new TextBox { Text = "5000", Font = new Font("Segoe UI", 10F), Dock = DockStyle.Fill };
            connectionLayout.Controls.Add(txtServerPort, 3, 0);

            // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            btnConnect = new Button { Text = "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", Font = new Font("Segoe UI", 10F, FontStyle.Bold), BackColor = Color.LightGreen, Dock = DockStyle.Fill };
            btnConnect.Click += BtnConnect_Click;
            connectionLayout.Controls.Add(btnConnect, 0, 1);

            // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            lblConnectionStatus = new Label { Text = "–°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª—é—á–µ–Ω–æ", Font = new Font("Segoe UI", 10F), ForeColor = Color.Red, Dock = DockStyle.Fill, TextAlign = ContentAlignment.MiddleLeft };
            connectionLayout.Controls.Add(lblConnectionStatus, 1, 1);
            connectionLayout.SetColumnSpan(lblConnectionStatus, 3);

            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
            btnCheckPort = new Button { Text = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç", Font = new Font("Segoe UI", 9F), Dock = DockStyle.Fill };
            btnCheckPort.Click += BtnCheckPort_Click;
            connectionLayout.Controls.Add(btnCheckPort, 2, 1);

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞
            connectionLayout.Controls.Add(new Label { Text = "–ò–º—è –∞–≥–µ–Ω—Ç–∞:", Font = new Font("Segoe UI", 10F), TextAlign = ContentAlignment.MiddleRight }, 0, 2);
            txtAgentName = new TextBox { Text = Environment.MachineName, Font = new Font("Segoe UI", 10F), Dock = DockStyle.Fill };
            connectionLayout.Controls.Add(txtAgentName, 1, 2);
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤
            connectionLayout.Controls.Add(new Label { Text = "–ü–æ—Ç–æ–∫–æ–≤:", Font = new Font("Segoe UI", 10F), TextAlign = ContentAlignment.MiddleRight }, 2, 2);
            numThreads = new NumericUpDown { Minimum = 1, Maximum = 128, Value = Environment.ProcessorCount, Font = new Font("Segoe UI", 10F), Dock = DockStyle.Fill };
            connectionLayout.Controls.Add(numThreads, 3, 2);

            connectionGroup.Controls.Add(connectionLayout);
            mainLayout.Controls.Add(connectionGroup, 0, 0);
            mainLayout.SetColumnSpan(connectionGroup, 2);

            // === –°–ï–ö–¶–ò–Ø –°–¢–ê–¢–£–°–ê –ê–ì–ï–ù–¢–ê ===
            var statusGroup = new GroupBox();
            statusGroup.Text = "–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞";
            statusGroup.Font = new Font("Segoe UI", 11F, FontStyle.Bold);
            statusGroup.Dock = DockStyle.Fill;

            var statusLayout = new TableLayoutPanel();
            statusLayout.Dock = DockStyle.Fill;
            statusLayout.ColumnCount = 4;
            statusLayout.RowCount = 2;
            statusLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25F));
            statusLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25F));
            statusLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25F));
            statusLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 25F));

            // –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
            lblAgentStatus = new Label { Text = "–°—Ç–∞—Ç—É—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", Font = new Font("Segoe UI", 10F), ForeColor = Color.Red, Dock = DockStyle.Fill, TextAlign = ContentAlignment.MiddleCenter };
            statusLayout.Controls.Add(lblAgentStatus, 0, 0);

            // –ü—Ä–æ–≥—Ä–µ—Å—Å
            lblProgress = new Label { Text = "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0", Font = new Font("Segoe UI", 10F), Dock = DockStyle.Fill, TextAlign = ContentAlignment.MiddleCenter };
            statusLayout.Controls.Add(lblProgress, 1, 0);

            // –°–∫–æ—Ä–æ—Å—Ç—å
            lblSpeed = new Label { Text = "–°–∫–æ—Ä–æ—Å—Ç—å: 0/—Å–µ–∫", Font = new Font("Segoe UI", 10F), Dock = DockStyle.Fill, TextAlign = ContentAlignment.MiddleCenter };
            statusLayout.Controls.Add(lblSpeed, 2, 0);

            // –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
            lblCurrentTask = new Label { Text = "–ó–∞–¥–∞–Ω–∏–µ: –ù–µ—Ç", Font = new Font("Segoe UI", 10F), Dock = DockStyle.Fill, TextAlign = ContentAlignment.MiddleCenter };
            statusLayout.Controls.Add(lblCurrentTask, 3, 0);

            // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            progressBar = new ProgressBar { Dock = DockStyle.Fill, Height = 20 };
            statusLayout.SetColumnSpan(progressBar, 4);
            statusLayout.Controls.Add(progressBar, 0, 1);

            statusGroup.Controls.Add(statusLayout);
            mainLayout.Controls.Add(statusGroup, 0, 1);
            mainLayout.SetColumnSpan(statusGroup, 2);

            // === –°–ï–ö–¶–ò–Ø –ó–ê–î–ê–ù–ò–ô ===
            var tasksGroup = new GroupBox();
            tasksGroup.Text = "–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è";
            tasksGroup.Font = new Font("Segoe UI", 11F, FontStyle.Bold);
            tasksGroup.Dock = DockStyle.Fill;

            listBoxTasks = new ListBox();
            listBoxTasks.Dock = DockStyle.Fill;
            listBoxTasks.Font = new Font("Consolas", 10F);
            listBoxTasks.Items.Add("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...");

            tasksGroup.Controls.Add(listBoxTasks);
            mainLayout.Controls.Add(tasksGroup, 0, 2);

            // === –°–ï–ö–¶–ò–Ø –õ–û–ì–ê ===
            var logGroup = new GroupBox();
            logGroup.Text = "–õ–æ–≥ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞";
            logGroup.Font = new Font("Segoe UI", 11F, FontStyle.Bold);
            logGroup.Dock = DockStyle.Fill;

            var logLayout = new TableLayoutPanel();
            logLayout.Dock = DockStyle.Fill;
            logLayout.ColumnCount = 1;
            logLayout.RowCount = 2;
            logLayout.RowStyles.Add(new RowStyle(SizeType.Percent, 100F));
            logLayout.RowStyles.Add(new RowStyle(SizeType.AutoSize));

            txtAgentLog = new TextBox();
            txtAgentLog.Dock = DockStyle.Fill;
            txtAgentLog.Multiline = true;
            txtAgentLog.ScrollBars = ScrollBars.Vertical;
            txtAgentLog.Font = new Font("Consolas", 9F);
            txtAgentLog.ReadOnly = true;
            txtAgentLog.BackColor = Color.Black;
            txtAgentLog.ForeColor = Color.Lime;
            logLayout.Controls.Add(txtAgentLog, 0, 0);

            // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞
            btnClearLog = new Button { Text = "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", Font = new Font("Segoe UI", 9F), Dock = DockStyle.Fill };
            btnClearLog.Click += BtnClearLog_Click;
            logLayout.Controls.Add(btnClearLog, 0, 1);

            logGroup.Controls.Add(logLayout);
            mainLayout.Controls.Add(logGroup, 0, 3);

            this.Controls.Add(mainLayout);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            AddLog("=== –†–ï–ñ–ò–ú –ê–ì–ï–ù–¢–ê –ó–ê–ü–£–©–ï–ù ===");
            AddLog("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É");
        }

        private async void BtnConnect_Click(object? sender, EventArgs e)
        {
            if (agentController?.IsConnected == true)
            {
                await DisconnectFromServer();
            }
            else
            {
                await ConnectToServer();
            }
        }

        private async Task ConnectToServer()
        {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            string ip = txtServerIp.Text.Trim();
            if (string.IsNullOrWhiteSpace(ip))
            {
                MessageBox.Show("–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞!", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            if (!int.TryParse(txtServerPort.Text.Trim(), out int port) || port < 1 || port > 65535)
            {
                MessageBox.Show("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ (1-65535)!", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            SaveAgentConfig();

            try
            {
                // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–≥–µ–Ω—Ç–∞
                agentController = new AgentController(this);
                agentController.OnStatusChanged += status => Invoke(new Action(() => UpdateAgentStatus(status)));
                agentController.OnLog += log => Invoke(new Action(() => AddAgentLog(log)));
                agentController.OnTaskReceived += task => Invoke(new Action(() => UpdateTaskInfo(task)));
                agentController.OnProgressUpdate += (current, rate) => Invoke(new Action(() => UpdateAgentProgress(current, rate)));

                btnConnect.Enabled = false;
                btnConnect.Text = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...";

                // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞–≥–µ–Ω—Ç–∞
                string agentName = txtAgentName.Text.Trim();
                int threads = (int)numThreads.Value;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞
                agentController.SaveAgentConfig();
                
                bool connected = await agentController.ConnectAsync(ip, port, agentName, threads);
                
                if (connected)
                {
                    btnConnect.Text = "–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è";
                    btnConnect.BackColor = Color.LightCoral;
                    AddLog($"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É {ip}:{port}");
                }
                else
                {
                    btnConnect.Text = "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è";
                    btnConnect.BackColor = Color.LightGreen;
                    agentController?.Dispose();
                    agentController = null;
                    AddLog("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                btnConnect.Text = "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è";
                btnConnect.BackColor = Color.LightGreen;
                agentController?.Dispose();
                agentController = null;
                AddLog($"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}");
            }
            finally
            {
                btnConnect.Enabled = true;
            }
        }

        private async Task DisconnectFromServer()
        {
            try
            {
                btnConnect.Enabled = false;
                btnConnect.Text = "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...";

                if (agentController != null)
                {
                    await agentController.DisconnectAsync();
                    agentController.Dispose();
                    agentController = null;
                }

                btnConnect.Text = "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è";
                btnConnect.BackColor = Color.LightGreen;
                
                // –û—á–∏—â–∞–µ–º –∞–≥–µ–Ω—Ç—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                listBoxTasks.Items.Clear();
                listBoxTasks.Items.Add("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
                AddLog("=== –û–¢–ö–õ–Æ–ß–ï–ù–û –û–¢ –°–ï–†–í–ï–†–ê ===");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                AddLog($"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}");
            }
            finally
            {
                btnConnect.Enabled = true;
            }
        }

        private void UpdateAgentStatus(string status)
        {
            lblConnectionStatus.Text = $"–°—Ç–∞—Ç—É—Å: {status}";
            
            if (status.Contains("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ"))
            {
                lblConnectionStatus.ForeColor = Color.Green;
                lblAgentStatus.Text = $"–°—Ç–∞—Ç—É—Å: {status}";
                lblAgentStatus.ForeColor = Color.Green;
            }
            else if (status.Contains("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ") || status.Contains("–û–∂–∏–¥–∞–Ω–∏–µ"))
            {
                lblConnectionStatus.ForeColor = Color.Orange;
                lblAgentStatus.Text = $"–°—Ç–∞—Ç—É—Å: {status}";
                lblAgentStatus.ForeColor = Color.Orange;
            }
            else
            {
                lblConnectionStatus.ForeColor = Color.Red;
                lblAgentStatus.Text = $"–°—Ç–∞—Ç—É—Å: {status}";
                lblAgentStatus.ForeColor = Color.Red;
            }
        }

        private void AddAgentLog(string log)
        {
            AddLog(log);
        }

        private void AddLog(string message)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞ –ª–∏ —Ñ–æ—Ä–º–∞
            if (isFormDisposed || this.IsDisposed || txtAgentLog.IsDisposed)
            {
                return;
            }

            if (txtAgentLog.InvokeRequired)
            {
                try
                {
                    txtAgentLog.Invoke(new Action(() => AddLog(message)));
                }
                catch (ObjectDisposedException)
                {
                    // –§–æ—Ä–º–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    return;
                }
                return;
            }

            try
            {
                var timestamp = DateTime.Now.ToString("HH:mm:ss");
                var logMessage = $"[{timestamp}] {message}";
                txtAgentLog.AppendText(logMessage + "\r\n");
                txtAgentLog.SelectionStart = txtAgentLog.Text.Length;
                txtAgentLog.ScrollToCaret();
                
                // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
                // Logger.LogAgent(message); // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –º—É—Å–æ—Ä–∞ –≤ –ª–æ–≥–∞—Ö
            }
            catch (ObjectDisposedException)
            {
                // –§–æ—Ä–º–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                return;
            }
            catch (Exception ex)
            {
                // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {ex.Message}");
            }
        }

        private void UpdateTaskInfo(AgentTaskInfo task)
        {
            listBoxTasks.Items.Clear();
            listBoxTasks.Items.Add($"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫ {task.BlockId}");
            listBoxTasks.Items.Add($"–î–∏–∞–ø–∞–∑–æ–Ω: {task.StartIndex:N0} - {task.EndIndex:N0}");
            listBoxTasks.Items.Add($"–ö–æ–º–±–∏–Ω–∞—Ü–∏–π: {task.EstimatedCombinations:N0}");
            listBoxTasks.Items.Add($"–ù–∞—á–∞—Ç–æ: {task.StartTime:HH:mm:ss}");
            
            lblCurrentTask.Text = $"–ó–∞–¥–∞–Ω–∏–µ: –ë–ª–æ–∫ {task.BlockId}";
            AddLog($"–ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: –±–ª–æ–∫ {task.BlockId} ({task.EstimatedCombinations:N0} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π)");
        }

        private void UpdateAgentProgress(long current, double rate)
        {
            lblProgress.Text = $"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {current:N0}";
            lblSpeed.Text = $"–°–∫–æ—Ä–æ—Å—Ç—å: {rate:F0}/—Å–µ–∫";
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
            if (rate > 0)
            {
                progressBar.Style = ProgressBarStyle.Marquee;
            }
        }

        private void BtnClearLog_Click(object? sender, EventArgs e)
        {
            txtAgentLog.Clear();
            AddLog("–õ–æ–≥ –æ—á–∏—â–µ–Ω");
        }

        private async void BtnCheckPort_Click(object? sender, EventArgs e)
        {
            string ip = txtServerIp.Text.Trim();
            if (!int.TryParse(txtServerPort.Text.Trim(), out int port) || port < 1 || port > 65535)
            {
                MessageBox.Show("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ (1-65535)!", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            AddLog($"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ {ip}:{port}...");
            bool open = await IsPortOpenAsync(ip, port, 2000);
            if (open)
            {
                AddLog($"–ü–æ—Ä—Ç {ip}:{port} –û–¢–ö–†–´–¢ (–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)");
                lblConnectionStatus.Text = $"–ü–æ—Ä—Ç {ip}:{port} –æ—Ç–∫—Ä—ã—Ç";
                lblConnectionStatus.ForeColor = Color.Green;
            }
            else
            {
                AddLog($"–ü–æ—Ä—Ç {ip}:{port} –ó–ê–ö–†–´–¢ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                lblConnectionStatus.Text = $"–ü–æ—Ä—Ç {ip}:{port} –∑–∞–∫—Ä—ã—Ç";
                lblConnectionStatus.ForeColor = Color.Red;
            }
        }

        private async Task<bool> IsPortOpenAsync(string host, int port, int timeoutMs)
        {
            try
            {
                using (var client = new System.Net.Sockets.TcpClient())
                {
                    var connectTask = client.ConnectAsync(host, port);
                    var timeoutTask = Task.Delay(timeoutMs);
                    var completed = await Task.WhenAny(connectTask, timeoutTask);
                    return connectTask.IsCompletedSuccessfully && client.Connected;
                }
            }
            catch
            {
                return false;
            }
        }

        private void SaveAgentConfig()
        {
            if (isLoadingConfig) { AddLog("[DEBUG] SaveAgentConfig: –≤—ã–∑–æ–≤ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω, –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞"); return; }
            try
            {
                AddLog($"[DEBUG] SaveAgentConfig: –î–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: IP={txtServerIp.Text}, Port={txtServerPort.Text}, Name={txtAgentName.Text}, Threads={numThreads.Value}");
                string ip = txtServerIp.Text.Trim();
                string portStr = txtServerPort.Text.Trim();
                string agentName = txtAgentName.Text.Trim();
                int threads = (int)numThreads.Value;
                if (!IsValidIpAddress(ip))
                {
                    AddLog($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP –∞–¥—Ä–µ—Å '{ip}'");
                    return;
                }
                if (!int.TryParse(portStr, out int port) || port < 1 || port > 65535)
                {
                    AddLog($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç '{portStr}'");
                    return;
                }
                if (string.IsNullOrWhiteSpace(agentName))
                    agentName = Environment.MachineName;
                if (threads < (int)numThreads.Minimum || threads > (int)numThreads.Maximum)
                    threads = Environment.ProcessorCount;
                var config = new AgentConfig
                {
                    ServerIp = ip,
                    ServerPort = port,
                    AgentName = agentName,
                    Threads = threads
                };
                var json = JsonSerializer.Serialize(config, new JsonSerializerOptions 
                { 
                    WriteIndented = true,
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });
                AddLog($"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª: {Path.GetFullPath(ConfigFile)}");
                AddLog($"JSON –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {json}");
                File.WriteAllText(ConfigFile, json);
                if (File.Exists(ConfigFile))
                {
                    var savedContent = File.ReadAllText(ConfigFile);
                    AddLog($"–§–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ. –†–∞–∑–º–µ—Ä: {savedContent.Length} –±–∞–π—Ç");
                    AddLog($"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config.ServerIp}:{config.ServerPort}, –∞–≥–µ–Ω—Ç: {config.AgentName}, –ø–æ—Ç–æ–∫–æ–≤: {config.Threads}");
                    AddLog($"[DEBUG] SaveAgentConfig: –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: IP={txtServerIp.Text}, Port={txtServerPort.Text}, Name={txtAgentName.Text}, Threads={numThreads.Value}");
                }
                else
                {
                    AddLog("–û–®–ò–ë–ö–ê: –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω!");
                }
            }
            catch (Exception ex)
            {
                AddLog($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {ex.Message}");
                AddLog($"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {ex.StackTrace}");
            }
        }

        private bool IsValidIpAddress(string ip)
        {
            if (string.IsNullOrWhiteSpace(ip))
                return false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ localhost
            if (ip.Equals("localhost", StringComparison.OrdinalIgnoreCase))
                return true;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç IP –∞–¥—Ä–µ—Å–∞
            var parts = ip.Split('.');
            if (parts.Length != 4)
                return false;

            foreach (var part in parts)
            {
                if (!int.TryParse(part, out int num) || num < 0 || num > 255)
                    return false;
            }

            return true;
        }

        private void LoadAgentConfig()
        {
            isLoadingConfig = true;
            try
            {
                AddLog($"[DEBUG] LoadAgentConfig: –î–û –∑–∞–≥—Ä—É–∑–∫–∏: IP={txtServerIp.Text}, Port={txtServerPort.Text}, Name={txtAgentName.Text}, Threads={numThreads.Value}");
                string ip = "127.0.0.1";
                int port = 5000;
                string agentName = Environment.MachineName;
                int threads = Environment.ProcessorCount;
                if (File.Exists(ConfigFile))
                {
                    var json = File.ReadAllText(ConfigFile);
                    AddLog($"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞: {Path.GetFullPath(ConfigFile)}");
                    AddLog($"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {json}");
                    var config = JsonSerializer.Deserialize<AgentConfig>(json);
                    if (config != null)
                    {
                        if (!string.IsNullOrWhiteSpace(config.ServerIp) && IsValidIpAddress(config.ServerIp))
                            ip = config.ServerIp;
                        else
                            AddLog($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP –∞–¥—Ä–µ—Å –≤ –∫–æ–Ω—Ñ–∏–≥–µ: '{config.ServerIp}', –∏—Å–ø–æ–ª—å–∑—É–µ–º 127.0.0.1");
                        if (config.ServerPort >= 1 && config.ServerPort <= 65535)
                            port = config.ServerPort;
                        else
                            AddLog($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {config.ServerPort}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 5000");
                        if (!string.IsNullOrWhiteSpace(config.AgentName))
                            agentName = config.AgentName;
                        if (config.Threads >= (int)numThreads.Minimum && config.Threads <= (int)numThreads.Maximum)
                            threads = config.Threads;
                        else
                            AddLog($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Ç–æ–∫–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {config.Threads}, –∏—Å–ø–æ–ª—å–∑—É–µ–º {Environment.ProcessorCount}");
                    }
                }
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫ –∫–æ–Ω—Ç—Ä–æ–ª–∞–º
                txtServerIp.Text = ip;
                txtServerPort.Text = port.ToString();
                txtAgentName.Text = agentName;
                numThreads.Value = threads;
                AddLog($"[DEBUG] LoadAgentConfig: –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏: IP={txtServerIp.Text}, Port={txtServerPort.Text}, Name={txtAgentName.Text}, Threads={numThreads.Value}");
                AddLog($"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {txtServerIp.Text}:{txtServerPort.Text}, –∞–≥–µ–Ω—Ç: {txtAgentName.Text}, –ø–æ—Ç–æ–∫–æ–≤: {numThreads.Value}");
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if (File.Exists("agent_progress.json"))
                {
                    try
                    {
                        var progressJson = File.ReadAllText("agent_progress.json");
                        var progress = JsonSerializer.Deserialize<Dictionary<string, object>>(progressJson);
                        if (progress != null && progress.ContainsKey("LastBlockId") && progress.ContainsKey("LastIndex"))
                        {
                            var lastBlockId = Convert.ToInt32(progress["LastBlockId"]);
                            var lastIndex = Convert.ToInt64(progress["LastIndex"]);
                            if (lastBlockId >= 0 && lastIndex > 0)
                            {
                                AddLog($"–ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: –±–ª–æ–∫ {lastBlockId}, –ø–æ–∑–∏—Ü–∏—è {lastIndex:N0}");
                                AddLog("–ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏");
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        AddLog($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {ex.Message}");
                    }
                }
            }
            catch (JsonException ex)
            {
                AddLog($"–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {ex.Message}");
                AddLog("–£–¥–∞–ª—è–µ–º –±–∏—Ç—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π");
                
                try
                {
                    if (File.Exists(ConfigFile))
                        File.Delete(ConfigFile);
                }
                catch { }
                
                CreateDefaultConfig();
            }
            catch (Exception ex)
            {
                AddLog($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {ex.Message}");
                AddLog($"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {ex.StackTrace}");
                CreateDefaultConfig();
            }
            finally
            {
                isLoadingConfig = false;
            }
        }

        private void CreateDefaultConfig()
        {
            isLoadingConfig = true;
            txtServerIp.Text = "127.0.0.1";
            txtServerPort.Text = "5000";
            txtAgentName.Text = Environment.MachineName;
            numThreads.Value = Environment.ProcessorCount;
            isLoadingConfig = false;
            SaveAgentConfig();
        }

        private class AgentConfig
        {
            public string ServerIp { get; set; } = "127.0.0.1";
            public int ServerPort { get; set; } = 5000; // –ò–∑–º–µ–Ω–µ–Ω–æ —Å string –Ω–∞ int
            public string AgentName { get; set; } = "";
            public int Threads { get; set; } = 1;
        }

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            isFormDisposed = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ–º —Ñ–æ—Ä–º—ã
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if (autosaveTimer != null)
            {
                autosaveTimer.Stop();
                autosaveTimer.Dispose();
                autosaveTimer = null;
            }
            
            try
            {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                SaveAgentConfigSilent();
            }
            catch (Exception ex)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –≤–º–µ—Å—Ç–æ UI
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {ex.Message}");
            }
            
            if (agentController?.IsConnected == true)
            {
                try
                {
                    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    _ = Task.Run(async () => 
                    {
                        try
                        {
                            await agentController.DisconnectAsync();
                        }
                        catch (Exception ex)
                        {
                            System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}");
                        }
                    });
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {ex.Message}");
                }
            }
            
            try
            {
                agentController?.Dispose();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {ex.Message}");
            }
            
            base.OnFormClosing(e);
        }
        
        private void SaveAgentConfigSilent()
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                string ip = txtServerIp.Text.Trim();
                string portStr = txtServerPort.Text.Trim();
                string agentName = txtAgentName.Text.Trim();
                int threads = (int)numThreads.Value;
                if (!IsValidIpAddress(ip))
                {
                    return; // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
                }
                if (!int.TryParse(portStr, out int port) || port < 1 || port > 65535)
                {
                    return; // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
                }
                if (string.IsNullOrWhiteSpace(agentName))
                    agentName = Environment.MachineName;
                if (threads < (int)numThreads.Minimum || threads > (int)numThreads.Maximum)
                    threads = Environment.ProcessorCount;
                var config = new AgentConfig
                {
                    ServerIp = ip,
                    ServerPort = port,
                    AgentName = agentName,
                    Threads = threads
                };
                var json = JsonSerializer.Serialize(config, new JsonSerializerOptions 
                { 
                    WriteIndented = true,
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });
                
                File.WriteAllText(ConfigFile, json);
            }
            catch (Exception ex)
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –≤–º–µ—Å—Ç–æ UI
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {ex.Message}");
            }
        }
    }
} 