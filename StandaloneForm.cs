using System;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using NBitcoin;
using System.Text.Json;
using System.IO;
using System.Collections.Generic;

namespace BitcoinFinder
{
    public partial class StandaloneForm : Form
    {
        private AdvancedSeedPhraseFinder? finder;
        private BackgroundWorker? searchWorker;
        private System.Windows.Forms.Timer? autoSaveTimer;
        
        // UI —ç–ª–µ–º–µ–Ω—Ç—ã
        private TextBox txtSeedPhrase = null!;
        private TextBox txtBitcoinAddress = null!;
        private NumericUpDown numWordCount = null!;
        private NumericUpDown numThreadCount = null!;
        private CheckBox chkFullSearch = null!;
        private Button btnStartSearch = null!;
        private Button btnStopSearch = null!;
        private Button btnSaveProgress = null!;
        private Button btnLoadProgress = null!;
        private ProgressBar progressBar = null!;
        private Label lblProgress = null!;
        private Label lblSpeed = null!;
        private Label lblTimeRemaining = null!;
        private Label lblValidationStatus = null!;
        private TextBox txtResults = null!;
        private TextBox txtLog = null!;

        public StandaloneForm()
        {
            InitializeFormElements();
            InitializeComponent();
            LoadFormConfig();
            SetupAutoSaveTimer();
            SetupValidation();
            
            this.FormClosing += StandaloneForm_FormClosing;
        }

        private void InitializeFormElements()
        {
            txtSeedPhrase = new TextBox();
            txtBitcoinAddress = new TextBox();
            numWordCount = new NumericUpDown();
            numThreadCount = new NumericUpDown();
            chkFullSearch = new CheckBox();
            btnStartSearch = new Button();
            btnStopSearch = new Button();
            btnSaveProgress = new Button();
            btnLoadProgress = new Button();
            progressBar = new ProgressBar();
            lblProgress = new Label();
            lblSpeed = new Label();
            lblTimeRemaining = new Label();
            lblValidationStatus = new Label();
            txtResults = new TextBox();
            txtLog = new TextBox();
        }

        private void InitializeComponent()
        {
            this.Size = new Size(1200, 800);
            this.Text = "Bitcoin Finder - Standalone Mode";
            this.StartPosition = FormStartPosition.CenterScreen;
            this.MinimumSize = new Size(1000, 600);

            // === –û–°–ù–û–í–ù–ê–Ø –†–ê–ó–ú–ï–¢–ö–ê ===
            var mainLayout = new TableLayoutPanel();
            mainLayout.Dock = DockStyle.Fill;
            mainLayout.ColumnCount = 2;
            mainLayout.RowCount = 3;
            mainLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50F));
            mainLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50F));
            mainLayout.RowStyles.Add(new RowStyle(SizeType.Percent, 45F)); // –í–≤–æ–¥ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            mainLayout.RowStyles.Add(new RowStyle(SizeType.Percent, 35F)); // –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            mainLayout.RowStyles.Add(new RowStyle(SizeType.Percent, 20F)); // –õ–æ–≥–∏

            // === –ì–†–£–ü–ü–ê –ü–ê–†–ê–ú–ï–¢–†–û–í –ü–û–ò–°–ö–ê ===
            var inputGroup = new GroupBox();
            inputGroup.Text = "üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞";
            inputGroup.Dock = DockStyle.Fill;
            inputGroup.Font = new Font("Segoe UI", 11F, FontStyle.Bold);

            var inputLayout = new TableLayoutPanel();
            inputLayout.Dock = DockStyle.Fill;
            inputLayout.ColumnCount = 2;
            inputLayout.RowCount = 8;
            inputLayout.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));
            inputLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100F));
            inputLayout.Padding = new Padding(10);

            // Seed —Ñ—Ä–∞–∑–∞
            inputLayout.Controls.Add(new Label { 
                Text = "Seed —Ñ—Ä–∞–∑–∞:", 
                Font = new Font("Segoe UI", 10F), 
                TextAlign = ContentAlignment.MiddleRight 
            }, 0, 0);
            txtSeedPhrase = new TextBox { 
                Text = "* * * * * * * * * * * *", 
                Font = new Font("Consolas", 10F), 
                Dock = DockStyle.Fill,
                Multiline = true,
                Height = 60
            };
            txtSeedPhrase.TextChanged += TxtSeedPhrase_TextChanged;
            inputLayout.Controls.Add(txtSeedPhrase, 1, 0);

            // Bitcoin –∞–¥—Ä–µ—Å
            inputLayout.Controls.Add(new Label { 
                Text = "Bitcoin –∞–¥—Ä–µ—Å:", 
                Font = new Font("Segoe UI", 10F), 
                TextAlign = ContentAlignment.MiddleRight 
            }, 0, 1);
            txtBitcoinAddress = new TextBox { 
                Text = "1MCirzugBCrn5H6jHix6PJSLX7EqUEniBQ", 
                Font = new Font("Consolas", 10F), 
                Dock = DockStyle.Fill 
            };
            txtBitcoinAddress.TextChanged += TxtBitcoinAddress_TextChanged;
            inputLayout.Controls.Add(txtBitcoinAddress, 1, 1);

            // –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            inputLayout.Controls.Add(new Label { 
                Text = "–°—Ç–∞—Ç—É—Å:", 
                Font = new Font("Segoe UI", 10F), 
                TextAlign = ContentAlignment.MiddleRight 
            }, 0, 2);
            lblValidationStatus = new Label { 
                Text = "‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É", 
                Font = new Font("Segoe UI", 10F, FontStyle.Bold), 
                ForeColor = Color.Green,
                Dock = DockStyle.Fill 
            };
            inputLayout.Controls.Add(lblValidationStatus, 1, 2);

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
            inputLayout.Controls.Add(new Label { 
                Text = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:", 
                Font = new Font("Segoe UI", 10F), 
                TextAlign = ContentAlignment.MiddleRight 
            }, 0, 3);
            numWordCount = new NumericUpDown { 
                Value = 12, 
                Minimum = 12, 
                Maximum = 24, 
                Increment = 6, 
                Font = new Font("Segoe UI", 10F), 
                Dock = DockStyle.Fill 
            };
            numWordCount.ValueChanged += NumWordCount_ValueChanged;
            inputLayout.Controls.Add(numWordCount, 1, 3);

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
            inputLayout.Controls.Add(new Label { 
                Text = "–ü–æ—Ç–æ–∫–æ–≤:", 
                Font = new Font("Segoe UI", 10F), 
                TextAlign = ContentAlignment.MiddleRight 
            }, 0, 4);
            numThreadCount = new NumericUpDown { 
                Value = Math.Min(4, Environment.ProcessorCount), 
                Minimum = 1, 
                Maximum = Environment.ProcessorCount * 2, 
                Font = new Font("Segoe UI", 10F), 
                Dock = DockStyle.Fill 
            };
            inputLayout.Controls.Add(numThreadCount, 1, 4);

            // –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä
            chkFullSearch = new CheckBox { 
                Text = "‚ö†Ô∏è –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä (–∫—Ä–∞–π–Ω–µ –æ–ø–∞—Å–Ω–æ!)", 
                Font = new Font("Segoe UI", 10F, FontStyle.Bold), 
                ForeColor = Color.Red,
                Dock = DockStyle.Fill 
            };
            chkFullSearch.CheckedChanged += ChkFullSearch_CheckedChanged;
            inputLayout.Controls.Add(chkFullSearch, 1, 5);
            inputLayout.SetColumnSpan(chkFullSearch, 2);

            // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            inputLayout.Controls.Add(new Label(), 0, 6);

            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            var buttonPanel = new FlowLayoutPanel();
            buttonPanel.Dock = DockStyle.Fill;
            buttonPanel.FlowDirection = FlowDirection.LeftToRight;
            buttonPanel.WrapContents = true;

            btnStartSearch = new Button { 
                Text = "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", 
                Font = new Font("Segoe UI", 11F, FontStyle.Bold), 
                BackColor = Color.LightGreen,
                ForeColor = Color.DarkGreen,
                Size = new Size(140, 40),
                Margin = new Padding(5)
            };
            btnStartSearch.Click += BtnStartSearch_Click;
            buttonPanel.Controls.Add(btnStartSearch);

            btnStopSearch = new Button { 
                Text = "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                Font = new Font("Segoe UI", 11F, FontStyle.Bold), 
                BackColor = Color.LightCoral,
                ForeColor = Color.DarkRed,
                Enabled = false,
                Size = new Size(140, 40),
                Margin = new Padding(5)
            };
            btnStopSearch.Click += BtnStopSearch_Click;
            buttonPanel.Controls.Add(btnStopSearch);

            btnSaveProgress = new Button { 
                Text = "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                Font = new Font("Segoe UI", 10F), 
                Size = new Size(110, 35),
                Margin = new Padding(5)
            };
            btnSaveProgress.Click += BtnSaveProgress_Click;
            buttonPanel.Controls.Add(btnSaveProgress);

            btnLoadProgress = new Button { 
                Text = "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å", 
                Font = new Font("Segoe UI", 10F), 
                Size = new Size(110, 35),
                Margin = new Padding(5)
            };
            btnLoadProgress.Click += BtnLoadProgress_Click;
            buttonPanel.Controls.Add(btnLoadProgress);

            inputLayout.Controls.Add(buttonPanel, 0, 7);
            inputLayout.SetColumnSpan(buttonPanel, 2);

            inputGroup.Controls.Add(inputLayout);
            mainLayout.Controls.Add(inputGroup, 0, 0);

            // === –ì–†–£–ü–ü–ê –ü–†–û–ì–†–ï–°–°–ê ===
            var progressGroup = new GroupBox();
            progressGroup.Text = "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∏—Å–∫–∞";
            progressGroup.Dock = DockStyle.Fill;
            progressGroup.Font = new Font("Segoe UI", 11F, FontStyle.Bold);

            var progressLayout = new TableLayoutPanel();
            progressLayout.Dock = DockStyle.Fill;
            progressLayout.RowCount = 5;
            progressLayout.ColumnCount = 1;
            progressLayout.Padding = new Padding(10);

            // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            progressBar = new ProgressBar();
            progressBar.Dock = DockStyle.Fill;
            progressBar.Height = 30;
            progressBar.Style = ProgressBarStyle.Continuous;
            progressLayout.Controls.Add(progressBar, 0, 0);

            // –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            lblProgress = new Label();
            lblProgress.Text = "0% (0 / 0)";
            lblProgress.Font = new Font("Segoe UI", 14F, FontStyle.Bold);
            lblProgress.TextAlign = ContentAlignment.MiddleCenter;
            lblProgress.Dock = DockStyle.Fill;
            lblProgress.ForeColor = Color.DarkBlue;
            progressLayout.Controls.Add(lblProgress, 0, 1);

            // –°–∫–æ—Ä–æ—Å—Ç—å
            lblSpeed = new Label();
            lblSpeed.Text = "–°–∫–æ—Ä–æ—Å—Ç—å: 0 –∫–æ–º–±/—Å–µ–∫";
            lblSpeed.Font = new Font("Segoe UI", 12F);
            lblSpeed.TextAlign = ContentAlignment.MiddleCenter;
            lblSpeed.Dock = DockStyle.Fill;
            lblSpeed.ForeColor = Color.DarkGreen;
            progressLayout.Controls.Add(lblSpeed, 0, 2);

            // –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            lblTimeRemaining = new Label();
            lblTimeRemaining.Text = "–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            lblTimeRemaining.Font = new Font("Segoe UI", 12F);
            lblTimeRemaining.TextAlign = ContentAlignment.MiddleCenter;
            lblTimeRemaining.Dock = DockStyle.Fill;
            lblTimeRemaining.ForeColor = Color.DarkOrange;
            progressLayout.Controls.Add(lblTimeRemaining, 0, 3);

            // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
            var instructionLabel = new Label();
            instructionLabel.Text = "üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ * –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª–æ–≤\n–ü—Ä–∏–º–µ—Ä: abandon * * * * * * * * * * *";
            instructionLabel.Font = new Font("Segoe UI", 9F);
            instructionLabel.TextAlign = ContentAlignment.MiddleCenter;
            instructionLabel.Dock = DockStyle.Fill;
            instructionLabel.ForeColor = Color.Gray;
            progressLayout.Controls.Add(instructionLabel, 0, 4);

            progressGroup.Controls.Add(progressLayout);
            mainLayout.Controls.Add(progressGroup, 1, 0);

            // === –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===
            var resultsGroup = new GroupBox();
            resultsGroup.Text = "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞";
            resultsGroup.Dock = DockStyle.Fill;
            resultsGroup.Font = new Font("Segoe UI", 11F, FontStyle.Bold);

            txtResults = new TextBox();
            txtResults.Dock = DockStyle.Fill;
            txtResults.Multiline = true;
            txtResults.ScrollBars = ScrollBars.Both;
            txtResults.Font = new Font("Consolas", 10F);
            txtResults.BackColor = Color.Black;
            txtResults.ForeColor = Color.Yellow;
            txtResults.ReadOnly = true;
            txtResults.Text = "–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞–π–¥–µ–Ω–Ω—ã–µ seed-—Ñ—Ä–∞–∑—ã...\r\n";
            resultsGroup.Controls.Add(txtResults);
            mainLayout.Controls.Add(resultsGroup, 0, 1);
            mainLayout.SetColumnSpan(resultsGroup, 2);

            // === –õ–û–ì ===
            var logGroup = new GroupBox();
            logGroup.Text = "üìã –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π";
            logGroup.Dock = DockStyle.Fill;
            logGroup.Font = new Font("Segoe UI", 11F, FontStyle.Bold);

            txtLog = new TextBox();
            txtLog.Dock = DockStyle.Fill;
            txtLog.Multiline = true;
            txtLog.ScrollBars = ScrollBars.Both;
            txtLog.Font = new Font("Consolas", 9F);
            txtLog.ReadOnly = true;
            txtLog.BackColor = Color.WhiteSmoke;
            logGroup.Controls.Add(txtLog);
            mainLayout.Controls.Add(logGroup, 0, 2);
            mainLayout.SetColumnSpan(logGroup, 2);

            this.Controls.Add(mainLayout);

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            AddLog("üöÄ Bitcoin Finder (Standalone) –∑–∞–ø—É—â–µ–Ω");
            AddLog("üí° –í–≤–µ–¥–∏—Ç–µ seed-—Ñ—Ä–∞–∑—É —Å * –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª–æ–≤");
            AddLog("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!");
        }

        private void SetupAutoSaveTimer()
        {
            autoSaveTimer = new System.Windows.Forms.Timer();
            autoSaveTimer.Interval = 60000; // 1 –º–∏–Ω—É—Ç–∞
            autoSaveTimer.Tick += AutoSaveTimer_Tick;
        }

        private void SetupValidation()
        {
            ValidateInputs();
        }

        #region –í–∞–ª–∏–¥–∞—Ü–∏—è

        private void TxtSeedPhrase_TextChanged(object? sender, EventArgs e)
        {
            ValidateInputs();
        }

        private void TxtBitcoinAddress_TextChanged(object? sender, EventArgs e)
        {
            ValidateInputs();
        }

        private void NumWordCount_ValueChanged(object? sender, EventArgs e)
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º seed-—Ñ—Ä–∞–∑—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
            var currentWords = txtSeedPhrase.Text.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            var targetCount = (int)numWordCount.Value;
            
            if (currentWords.Length != targetCount)
            {
                var newWords = new string[targetCount];
                for (int i = 0; i < targetCount; i++)
                {
                    newWords[i] = i < currentWords.Length ? currentWords[i] : "*";
                }
                txtSeedPhrase.Text = string.Join(" ", newWords);
            }
            ValidateInputs();
        }

        private void ChkFullSearch_CheckedChanged(object? sender, EventArgs e)
        {
            if (chkFullSearch.Checked)
            {
                var result = MessageBox.Show(
                    "‚ö†Ô∏è –ö–†–ê–ô–ù–ï –í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï! ‚ö†Ô∏è\n\n" +
                    "–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä –¥–ª—è 12 —Å–ª–æ–≤ = 2048^12 ‚âà 5.4√ó10¬≥‚Åπ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π\n" +
                    "–ü—Ä–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ 1 –º–∏–ª–ª–∏–æ–Ω –∫–æ–º–±/—Å–µ–∫ —ç—Ç–æ –∑–∞–π–º–µ—Ç ~1.7√ó10¬≤‚Å∂ –ª–µ—Ç!\n\n" +
                    "–≠—Ç–æ –±–æ–ª—å—à–µ —á–µ–º –≤–æ–∑—Ä–∞—Å—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π –≤ 10¬π‚Å∂ —Ä–∞–∑!\n\n" +
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ª–æ–≤–∞.\n\n" +
                    "–í–´ –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –•–û–¢–ò–¢–ï –ü–†–û–î–û–õ–ñ–ò–¢–¨?",
                    "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï",
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Warning,
                    MessageBoxDefaultButton.Button2);

                if (result == DialogResult.No)
                {
                    chkFullSearch.Checked = false;
                }
                else
                {
                    AddLog("‚ö†Ô∏è –í–ö–õ–Æ–ß–ï–ù –ü–û–õ–ù–´–ô –ü–ï–†–ï–ë–û–†! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω –æ —Ä–∏—Å–∫–∞—Ö.");
                }
            }
            ValidateInputs();
        }

        private void ValidateInputs()
        {
            var issues = new List<string>();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ seed-—Ñ—Ä–∞–∑—ã
            if (!string.IsNullOrWhiteSpace(txtSeedPhrase.Text))
            {
                var words = txtSeedPhrase.Text.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                if (words.Length != numWordCount.Value)
                {
                    issues.Add($"–ù—É–∂–Ω–æ {numWordCount.Value} —Å–ª–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {words.Length}");
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ BIP39 —Å–ª–æ–≤
                var wordlist = Wordlist.English.GetWords().ToList();
                foreach (var word in words)
                {
                    if (word != "*" && !word.Contains("*") && !wordlist.Contains(word))
                    {
                        issues.Add($"'{word}' –Ω–µ –∏–∑ BIP39 —Å–ª–æ–≤–∞—Ä—è");
                        break;
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª–æ–≤
                var unknownCount = words.Count(w => w == "*" || w.Contains("*"));
                if (unknownCount > 6 && !chkFullSearch.Checked)
                {
                    issues.Add($"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–ª–æ–≤ ({unknownCount}). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ‚â§4");
                }
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ Bitcoin –∞–¥—Ä–µ—Å–∞
            if (!string.IsNullOrWhiteSpace(txtBitcoinAddress.Text))
            {
                if (!IsValidBitcoinAddress(txtBitcoinAddress.Text))
                {
                    issues.Add("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Bitcoin –∞–¥—Ä–µ—Å–∞");
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if (issues.Count == 0)
            {
                lblValidationStatus.Text = "‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É";
                lblValidationStatus.ForeColor = Color.Green;
                btnStartSearch.Enabled = true;
            }
            else
            {
                lblValidationStatus.Text = $"‚ùå {string.Join("; ", issues)}";
                lblValidationStatus.ForeColor = Color.Red;
                btnStartSearch.Enabled = false;
            }
        }

        private bool IsValidBitcoinAddress(string address)
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã Bitcoin –∞–¥—Ä–µ—Å–æ–≤
                BitcoinAddress.Create(address, Network.Main);
                return true;
            }
            catch
            {
                return false;
            }
        }

        #endregion

        #region –ü–æ–∏—Å–∫

        private void BtnStartSearch_Click(object? sender, EventArgs e)
        {
            StartSearch();
        }

        private void StartSearch()
        {
            if (searchWorker != null && searchWorker.IsBusy)
            {
                AddLog("‚ùå –ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
                return;
            }

            try
            {
                // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
                var parameters = new SearchParameters
                {
                    SeedPhrase = txtSeedPhrase.Text.Trim(),
                    BitcoinAddress = txtBitcoinAddress.Text.Trim(),
                    WordCount = (int)numWordCount.Value,
                    ThreadCount = (int)numThreadCount.Value,
                    FullSearch = chkFullSearch.Checked
                };

                // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞
                AddLog($"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞...");
                AddLog($"üìù Seed-—Ñ—Ä–∞–∑–∞: {parameters.SeedPhrase}");
                AddLog($"üéØ Bitcoin –∞–¥—Ä–µ—Å: {parameters.BitcoinAddress}");
                AddLog($"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {parameters.WordCount}");
                AddLog($"‚ö° –ü–æ—Ç–æ–∫–æ–≤: {parameters.ThreadCount}");
                AddLog($"üîç –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä: {(parameters.FullSearch ? "–î–ê" : "–ù–ï–¢")}");

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤–∏–∫
                finder = new AdvancedSeedPhraseFinder();

                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º BackgroundWorker
                searchWorker = new BackgroundWorker();
                searchWorker.WorkerReportsProgress = true;
                searchWorker.WorkerSupportsCancellation = true;
                searchWorker.DoWork += SearchWorker_DoWork;
                searchWorker.ProgressChanged += SearchWorker_ProgressChanged;
                searchWorker.RunWorkerCompleted += SearchWorker_RunWorkerCompleted;

                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
                searchWorker.RunWorkerAsync(parameters);

                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                btnStartSearch.Enabled = false;
                btnStopSearch.Enabled = true;
                autoSaveTimer?.Start();

                txtResults.Text = $"üîç –ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω –≤ {DateTime.Now:HH:mm:ss}\r\n";
                txtResults.AppendText("–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...\r\n");
            }
            catch (Exception ex)
            {
                AddLog($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞: {ex.Message}");
                MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void BtnStopSearch_Click(object? sender, EventArgs e)
        {
            StopSearch();
        }

        private void StopSearch()
        {
            if (searchWorker != null && searchWorker.IsBusy)
            {
                searchWorker.CancelAsync();
                finder?.Cancel();
                AddLog("‚èπÔ∏è –ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...");
            }
        }

        private void SearchWorker_DoWork(object? sender, DoWorkEventArgs e)
        {
            var parameters = (SearchParameters)e.Argument!;
            finder?.Search(parameters, (BackgroundWorker)sender!, e);
        }

        private void SearchWorker_ProgressChanged(object? sender, ProgressChangedEventArgs e)
        {
            try
            {
                if (e.UserState is string message)
                {
                    if (message.StartsWith("FOUND:") || message.StartsWith("–ù–ê–ô–î–ï–ù–û"))
                    {
                        // –ù–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
                        txtResults.AppendText($"üéâ {DateTime.Now:HH:mm:ss} - {message}\r\n");
                        txtResults.SelectionStart = txtResults.Text.Length;
                        txtResults.ScrollToCaret();
                        AddLog($"üéâ {message}");
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        this.WindowState = FormWindowState.Normal;
                        this.BringToFront();
                        MessageBox.Show(message, "üéâ –ù–ê–ô–î–ï–ù–û!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else if (message.Contains("%"))
                    {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        var parts = message.Split('(', ')');
                        if (parts.Length >= 2)
                        {
                            var progressPart = parts[0].Trim().Replace("%", "");
                            if (double.TryParse(progressPart, out double percent))
                            {
                                progressBar.Value = Math.Max(0, Math.Min(100, (int)percent));
                            }
                            lblProgress.Text = parts.Length > 1 ? $"{parts[0]} ({parts[1]})" : message;
                        }
                    }
                    else if (message.Contains("—Å–∫–æ—Ä–æ—Å—Ç—å") || message.ToLower().Contains("speed"))
                    {
                        lblSpeed.Text = message;
                    }
                    else if (message.Contains("–≤—Ä–µ–º—è") || message.ToLower().Contains("time"))
                    {
                        lblTimeRemaining.Text = message;
                    }
                    else
                    {
                        AddLog(message);
                    }
                }
            }
            catch (Exception ex)
            {
                AddLog($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {ex.Message}");
            }
        }

        private void SearchWorker_RunWorkerCompleted(object? sender, RunWorkerCompletedEventArgs e)
        {
            try
            {
                btnStartSearch.Enabled = true;
                btnStopSearch.Enabled = false;
                autoSaveTimer?.Stop();

                if (e.Cancelled)
                {
                    AddLog("‚èπÔ∏è –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
                    txtResults.AppendText($"‚èπÔ∏è {DateTime.Now:HH:mm:ss} - –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω\r\n");
                    lblProgress.Text = "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω";
                }
                else if (e.Error != null)
                {
                    AddLog($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e.Error.Message}");
                    txtResults.AppendText($"‚ùå {DateTime.Now:HH:mm:ss} - –û—à–∏–±–∫–∞: {e.Error.Message}\r\n");
                    lblProgress.Text = "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞";
                }
                else
                {
                    AddLog("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
                    txtResults.AppendText($"‚úÖ {DateTime.Now:HH:mm:ss} - –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω\r\n");
                    lblProgress.Text = "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω";
                }

                progressBar.Value = 0;
                lblSpeed.Text = "–°–∫–æ—Ä–æ—Å—Ç—å: 0 –∫–æ–º–±/—Å–µ–∫";
                lblTimeRemaining.Text = "–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            }
            catch (Exception ex)
            {
                AddLog($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {ex.Message}");
            }
        }

        #endregion

        #region –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞

        private void BtnSaveProgress_Click(object? sender, EventArgs e)
        {
            try
            {
                using var dialog = new SaveFileDialog();
                dialog.Filter = "JSON files (*.json)|*.json";
                dialog.DefaultExt = "json";
                dialog.FileName = $"standalone_progress_{DateTime.Now:yyyyMMdd_HHmmss}.json";
                
                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    var progressData = new ProgressData
                    {
                        SeedPhrase = txtSeedPhrase.Text,
                        BitcoinAddress = txtBitcoinAddress.Text,
                        WordCount = (int)numWordCount.Value,
                        FullSearch = chkFullSearch.Checked,
                        ThreadCount = (int)numThreadCount.Value,
                        Timestamp = DateTime.Now
                    };
                    
                    var json = JsonSerializer.Serialize(progressData, new JsonSerializerOptions { WriteIndented = true });
                    File.WriteAllText(dialog.FileName, json);
                    
                    AddLog($"üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {Path.GetFileName(dialog.FileName)}");
                }
            }
            catch (Exception ex)
            {
                AddLog($"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {ex.Message}");
                MessageBox.Show($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void BtnLoadProgress_Click(object? sender, EventArgs e)
        {
            try
            {
                using var dialog = new OpenFileDialog();
                dialog.Filter = "JSON files (*.json)|*.json";
                dialog.DefaultExt = "json";
                
                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    var json = File.ReadAllText(dialog.FileName);
                    var progressData = JsonSerializer.Deserialize<ProgressData>(json);
                    
                    if (progressData != null)
                    {
                        txtSeedPhrase.Text = progressData.SeedPhrase;
                        txtBitcoinAddress.Text = progressData.BitcoinAddress;
                        numWordCount.Value = progressData.WordCount;
                        chkFullSearch.Checked = progressData.FullSearch;
                        numThreadCount.Value = progressData.ThreadCount;
                        
                        AddLog($"üìÇ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {Path.GetFileName(dialog.FileName)}");
                        ValidateInputs();
                    }
                }
            }
            catch (Exception ex)
            {
                AddLog($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {ex.Message}");
                MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void AutoSaveTimer_Tick(object? sender, EventArgs e)
        {
            try
            {
                if (searchWorker != null && searchWorker.IsBusy)
                {
                    var autoSavePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "standalone_auto_save.json");
                    var progressData = new ProgressData
                    {
                        SeedPhrase = txtSeedPhrase.Text,
                        BitcoinAddress = txtBitcoinAddress.Text,
                        WordCount = (int)numWordCount.Value,
                        FullSearch = chkFullSearch.Checked,
                        ThreadCount = (int)numThreadCount.Value,
                        Timestamp = DateTime.Now
                    };
                    
                    var json = JsonSerializer.Serialize(progressData, new JsonSerializerOptions { WriteIndented = true });
                    File.WriteAllText(autoSavePath, json);
                    
                    AddLog("üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ");
                }
            }
            catch (Exception ex)
            {
                AddLog($"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {ex.Message}");
            }
        }

        #endregion

        #region –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

        private void LoadFormConfig()
        {
            try
            {
                if (Program.Config.LastSearch != null)
                {
                    txtSeedPhrase.Text = Program.Config.LastSearch.LastSeedPhrase;
                    txtBitcoinAddress.Text = Program.Config.LastSearch.LastBitcoinAddress;
                    numWordCount.Value = Program.Config.LastSearch.LastWordCount;
                    chkFullSearch.Checked = Program.Config.LastSearch.LastFullSearch;
                    numThreadCount.Value = Program.Config.LastSearch.LastThreadCount;
                }

                ValidateInputs();
                AddLog("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                AddLog($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {ex.Message}");
            }
        }

        private void SaveFormConfig()
        {
            try
            {
                Program.Config.LastSearch.LastSeedPhrase = txtSeedPhrase.Text;
                Program.Config.LastSearch.LastBitcoinAddress = txtBitcoinAddress.Text;
                Program.Config.LastSearch.LastWordCount = (int)numWordCount.Value;
                Program.Config.LastSearch.LastFullSearch = chkFullSearch.Checked;
                Program.Config.LastSearch.LastThreadCount = (int)numThreadCount.Value;
                Program.Config.LastSearch.LastSearchTime = DateTime.Now;

                Program.SaveConfig();
                AddLog("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                AddLog($"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {ex.Message}");
            }
        }

        #endregion

        #region –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

        private void AddLog(string message)
        {
            try
            {
                if (txtLog.InvokeRequired)
                {
                    txtLog.BeginInvoke(() => AddLog(message));
                    return;
                }

                var timestamp = DateTime.Now.ToString("HH:mm:ss");
                txtLog.AppendText($"[{timestamp}] {message}\r\n");
                
                // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
                txtLog.SelectionStart = txtLog.Text.Length;
                txtLog.ScrollToCaret();

                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å—Ç—Ä–æ–∫)
                if (txtLog.Lines.Length > 500)
                {
                    var lines = txtLog.Lines.Skip(250).ToArray();
                    txtLog.Text = string.Join("\r\n", lines);
                }
            }
            catch
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            }
        }

        #endregion

        #region –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤

        private void StandaloneForm_FormClosing(object? sender, FormClosingEventArgs e)
        {
            try
            {
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
                StopSearch();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                SaveFormConfig();
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
                autoSaveTimer?.Stop();
                autoSaveTimer?.Dispose();
                
                // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
                searchWorker?.Dispose();
                
                AddLog("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã: {ex.Message}");
            }
        }

        #endregion
    }
} 