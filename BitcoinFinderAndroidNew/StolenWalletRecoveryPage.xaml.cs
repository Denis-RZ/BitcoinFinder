#nullable enable
using BitcoinFinderAndroidNew.Services;
using System.Collections.ObjectModel;
using Microsoft.Extensions.Logging;

namespace BitcoinFinderAndroidNew;

public partial class StolenWalletRecoveryPage : ContentPage
{
    private TargetedKeyFinder? keyFinder;
    private CancellationTokenSource cancellationTokenSource = new();
    private bool isRecovering = false;
    private DateTime recoveryStartTime;
    private IDispatcherTimer? updateTimer;
    private long totalProcessed = 0;
    private string foundPrivateKey = "";

    public StolenWalletRecoveryPage()
    {
        try
        {
            InitializeComponent();
            SetupEventHandlers();
            SetupTimer();
            AddLog("üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ö–∏—â–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
            AddLog("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü–æ–∏—Å–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏");
            AddLog("üìÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–¥ 2017 –≥–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {ex}");
            MainThread.BeginInvokeOnMainThread(async () =>
            {
                await DisplayAlert("–û—à–∏–±–∫–∞", $"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}", "OK");
            });
        }
    }

    private void SetupEventHandlers()
    {
        // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
        StartRecoveryButton.Pressed += async (s, e) => await AnimateButton(StartRecoveryButton);
        StopRecoveryButton.Pressed += async (s, e) => await AnimateButton(StopRecoveryButton);
    }

    private void SetupTimer()
    {
        updateTimer = Application.Current?.Dispatcher.CreateTimer();
        if (updateTimer != null)
        {
            updateTimer.Interval = TimeSpan.FromMilliseconds(100);
            updateTimer.Tick += UpdateElapsedTime;
        }
    }

    private async Task AnimateButton(Button button)
    {
        await button.ScaleTo(0.95, 100);
        await button.ScaleTo(1.0, 100);
    }

    private async void OnStartRecoveryClicked(object sender, EventArgs e)
    {
        if (isRecovering)
        {
            await DisplayAlert("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", "OK");
            return;
        }

        var targetAddress = TargetAddressEntry.Text?.Trim();
        if (string.IsNullOrWhiteSpace(targetAddress))
        {
            await DisplayAlert("‚ùå –û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ Bitcoin –∞–¥—Ä–µ—Å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", "OK");
            return;
        }

        if (!IsValidBitcoinAddress(targetAddress))
        {
            await DisplayAlert("‚ùå –û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Bitcoin –∞–¥—Ä–µ—Å–∞", "OK");
            return;
        }

        try
        {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            var result = await DisplayAlert("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                $"–ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:\n\n" +
                $"üìç –ê–¥—Ä–µ—Å: {targetAddress}\n" +
                $"üìÖ –ì–æ–¥ –ø–æ—Ö–∏—â–µ–Ω–∏—è: 2017\n" +
                $"üß† –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ\n\n" +
                $"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", 
                "üöÄ –î–∞, –Ω–∞—á–∞—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞");

            if (!result) return;

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
            keyFinder = new TargetedKeyFinder(targetAddress, new DateTime(2017, 1, 1));
            keyFinder.LogMessage += OnLogMessage;
            keyFinder.ProgressReported += OnProgressReported;
            keyFinder.KeyFound += OnKeyFound;

            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            isRecovering = true;
            recoveryStartTime = DateTime.Now;
            totalProcessed = 0;
            cancellationTokenSource = new CancellationTokenSource();

            StartRecoveryButton.IsEnabled = false;
            StopRecoveryButton.IsEnabled = true;
            StatusLabel.Text = "üöÄ –°—Ç–∞—Ç—É—Å: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ";

            AddLog($"üéØ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞: {targetAddress}");
            AddLog("üìö –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ 2017 –≥–æ–¥–∞...");

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
            _ = Task.Run(async () =>
            {
                var foundResult = await keyFinder.FindPrivateKeyAsync(cancellationTokenSource.Token);
                OnRecoveryCompleted(foundResult != null);
            });

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            updateTimer?.Start();
        }
        catch (Exception ex)
        {
            await DisplayAlert("‚ùå –û—à–∏–±–∫–∞", $"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {ex.Message}", "OK");
            isRecovering = false;
        }
    }

    private void OnStopRecoveryClicked(object sender, EventArgs e)
    {
        if (!isRecovering) return;

        cancellationTokenSource?.Cancel();
        isRecovering = false;
        
        StartRecoveryButton.IsEnabled = true;
        StopRecoveryButton.IsEnabled = false;
        StatusLabel.Text = "‚èπÔ∏è –°—Ç–∞—Ç—É—Å: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ";
        
        updateTimer?.Stop();
        AddLog("‚èπÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
    }

    private void OnLogMessage(string message)
    {
        MainThread.BeginInvokeOnMainThread(() =>
        {
            AddLog(message);
        });
    }

    private void OnProgressReported(long index, string currentKey, string currentAddress)
    {
        MainThread.BeginInvokeOnMainThread(() =>
        {
            totalProcessed++;
            
            CurrentKeyLabel.Text = $"üîë –¢–µ–∫—É—â–∏–π –∫–ª—é—á: {currentKey.Substring(0, Math.Min(16, currentKey.Length))}...";
            
            if (totalProcessed % 100 == 0)
            {
                var elapsed = DateTime.Now - recoveryStartTime;
                var speed = totalProcessed / elapsed.TotalSeconds;
                SpeedLabel.Text = $"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {speed:F0} –∫/—Å";
                ProcessedKeysLabel.Text = $"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {totalProcessed:N0}";
            }
        });
    }

    private void OnKeyFound(FoundResult result)
    {
        MainThread.BeginInvokeOnMainThread(async () =>
        {
            foundPrivateKey = result.PrivateKey;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            ResultDetails.IsVisible = true;
            FoundKeyLabel.Text = $"üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {result.PrivateKey}";
            AddressLabel.Text = $"üìç –ê–¥—Ä–µ—Å: {result.BitcoinAddress}";
            StrategyUsedLabel.Text = $"üß† –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {GetStrategyName(result.FoundAtIndex)}";
            ProcessingTimeLabel.Text = $"‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {result.FoundAt - recoveryStartTime:hh\\:mm\\:ss}";
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            StatusLabel.Text = "üéâ –°—Ç–∞—Ç—É—Å: –ü–†–ò–í–ê–¢–ù–´–ô –ö–õ–Æ–ß –ù–ê–ô–î–ï–ù!";
            StatusLabel.TextColor = Color.FromArgb("#2E7D32");
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await DisplayAlert("üéâ –£–°–ü–ï–•!", 
                $"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞–π–¥–µ–Ω!\n\n" +
                $"üîë –ö–ª—é—á: {result.PrivateKey}\n" +
                $"üìç –ê–¥—Ä–µ—Å: {result.BitcoinAddress}\n" +
                $"üß† –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {GetStrategyName(result.FoundAtIndex)}\n\n" +
                $"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ—à–µ–ª—å–∫—É!", 
                "‚úÖ –ü–æ–Ω—è—Ç–Ω–æ");
            
            AddLog("üéâ –ü–†–ò–í–ê–¢–ù–´–ô –ö–õ–Æ–ß –£–°–ü–ï–®–ù–û –ù–ê–ô–î–ï–ù!");
            AddLog($"üîë –ö–ª—é—á: {result.PrivateKey}");
            AddLog($"üß† –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {GetStrategyName(result.FoundAtIndex)}");
        });
    }

    private void OnRecoveryCompleted(bool success)
    {
        MainThread.BeginInvokeOnMainThread(() =>
        {
            isRecovering = false;
            StartRecoveryButton.IsEnabled = true;
            StopRecoveryButton.IsEnabled = false;
            updateTimer?.Stop();

            if (!success)
            {
                StatusLabel.Text = "‚ùå –°—Ç–∞—Ç—É—Å: –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω";
                AddLog("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö");
                AddLog("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ —Ä–∞—Å—à–∏—Ä—å—Ç–µ –ø–æ–∏—Å–∫");
            }
        });
    }

    private void UpdateElapsedTime(object? sender, EventArgs e)
    {
        if (isRecovering)
        {
            var elapsed = DateTime.Now - recoveryStartTime;
            ElapsedTimeLabel.Text = $"‚è±Ô∏è –í—Ä–µ–º—è: {elapsed:hh\\:mm\\:ss}";
        }
    }

    private async void OnCopyKeyClicked(object sender, EventArgs e)
    {
        if (string.IsNullOrEmpty(foundPrivateKey))
        {
            await DisplayAlert("‚ùå –û—à–∏–±–∫–∞", "–ù–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", "OK");
            return;
        }

        try
        {
            await Clipboard.SetTextAsync(foundPrivateKey);
            await DisplayAlert("‚úÖ –£—Å–ø–µ—Ö", "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", "OK");
            AddLog("üìã –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞");
        }
        catch (Exception ex)
        {
            await DisplayAlert("‚ùå –û—à–∏–±–∫–∞", $"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {ex.Message}", "OK");
        }
    }

    private void AddLog(string message)
    {
        var timestamp = DateTime.Now.ToString("HH:mm:ss");
        var logEntry = $"[{timestamp}] {message}";
        
        if (LogLabel.Text.Length > 5000)
        {
            LogLabel.Text = LogLabel.Text.Substring(LogLabel.Text.Length - 4000);
        }
        
        LogLabel.Text += logEntry + Environment.NewLine;
    }

    private bool IsValidBitcoinAddress(string address)
    {
        if (string.IsNullOrEmpty(address))
            return false;

        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ Bitcoin –∞–¥—Ä–µ—Å–∞
        if (address.Length < 26 || address.Length > 35)
            return false;

        if (!address.StartsWith("1") && !address.StartsWith("3") && !address.StartsWith("bc1"))
            return false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        var validChars = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
        return address.All(c => validChars.Contains(c));
    }

    private string GetStrategyName(long foundAtIndex)
    {
        return foundAtIndex switch
        {
            -1 => "–ò–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å",
            -2 => "–°–ª–æ–≤–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫",
            -3 => "Brain wallet",
            -4 => "–ò–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å",
            _ => foundAtIndex < 1000 ? "–ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞" : "–°–ª—É—á–∞–π–Ω—ã–π –ø–æ–∏—Å–∫"
        };
    }

    protected override void OnDisappearing()
    {
        base.OnDisappearing();
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (isRecovering)
        {
            cancellationTokenSource?.Cancel();
            updateTimer?.Stop();
        }
    }
} 