#nullable enable
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Threading;
using System.Threading.Tasks;
using System.Net.Http;
using System.Text.Json;

namespace BitcoinFinderAndroidNew.Services
{
    public class BackgroundSearchService
    {
        private readonly ProgressManager progressManager;
        private readonly object lockObject = new object();
        
        private SearchProgress? currentProgress;
        private CancellationTokenSource? cancellationTokenSource;
        private bool isRunning = false;
        private DateTime startTime;
        private long totalProcessed = 0;
        private string targetAddress = "";
        private long lastSavedIndex = 0;

        public event Action<ProgressInfo>? ProgressReported;
        public event Action<string>? LogMessage;
        public event Action<FoundResult>? Found;
        public event Action<SearchProgress>? ProgressSaved;

        public BackgroundSearchService(ProgressManager progressManager)
        {
            this.progressManager = progressManager;
        }

        public async Task<bool> StartSearchAsync(PrivateKeyParameters parameters, string taskName, CancellationToken cancellationToken = default)
        {
            if (isRunning)
            {
                LogMessage?.Invoke("–ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
                return false;
            }

            if (string.IsNullOrWhiteSpace(parameters.TargetAddress))
            {
                LogMessage?.Invoke("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ü–µ–ª–µ–≤–æ–π –∞–¥—Ä–µ—Å");
                return false;
            }

            try
            {
                targetAddress = parameters.TargetAddress.Trim();
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                currentProgress = progressManager.LoadProgress();
                if (currentProgress == null || currentProgress.TargetAddress != targetAddress)
                {
                    currentProgress = new SearchProgress
                    {
                        TaskId = Guid.NewGuid().ToString(),
                        TaskName = taskName,
                        TargetAddress = targetAddress,
                        StartIndex = parameters.StartIndex,
                        EndIndex = parameters.EndIndex,
                        Format = parameters.Format,
                        Network = parameters.Network,
                        CurrentIndex = parameters.StartIndex, // –ù–∞—á–∏–Ω–∞–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
                        IsActive = true
                    };
                }

                cancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);
                isRunning = true;
                startTime = DateTime.Now;
                totalProcessed = 0;
                lastSavedIndex = currentProgress.CurrentIndex;

                LogMessage?.Invoke($"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫: {targetAddress}");
                LogMessage?.Invoke($"–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {currentProgress.CurrentIndex:N0}");

                var tasks = new List<Task>();
                FoundResult? foundResult = null;
                var foundResultLock = new object();

                // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–∞ –ø–æ—Ç–æ–∫–∏
                var keysPerThread = (currentProgress.EndIndex - currentProgress.CurrentIndex) / parameters.ThreadCount;
                
                for (int i = 0; i < parameters.ThreadCount; i++)
                {
                    var threadId = i;
                    var threadStart = currentProgress.CurrentIndex + (keysPerThread * i);
                    var threadEnd = i == parameters.ThreadCount - 1 
                        ? currentProgress.EndIndex 
                        : currentProgress.CurrentIndex + (keysPerThread * (i + 1));

                    tasks.Add(Task.Run(async () =>
                    {
                        var result = await SearchRangeAsync(threadStart, threadEnd, parameters.Format, parameters.Network, 
                            cancellationTokenSource.Token, threadId);
                        
                        if (result != null)
                        {
                            lock (foundResultLock)
                            {
                                if (foundResult == null)
                                {
                                    foundResult = result;
                                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
                                    cancellationTokenSource?.Cancel();
                                }
                            }
                        }
                    }, cancellationTokenSource.Token));
                }

                // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                var saveProgressTask = Task.Run(async () =>
                {
                    await SaveProgressPeriodicallyAsync(cancellationTokenSource.Token);
                }, cancellationTokenSource.Token);

                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
                await Task.WhenAll(tasks);
                saveProgressTask.Dispose();

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (foundResult != null)
                {
                    progressManager.SaveFoundResult(foundResult);
                    Found?.Invoke(foundResult);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    if (currentProgress != null)
                    {
                        currentProgress.FoundResult = new PrivateKeyResult
                        {
                            Found = true,
                            PrivateKey = foundResult.PrivateKey,
                            BitcoinAddress = foundResult.BitcoinAddress,
                            Balance = foundResult.Balance,
                            FoundAt = foundResult.FoundAt,
                            ProcessingTime = DateTime.Now - startTime,
                            ProcessedKeys = totalProcessed,
                            FoundAtIndex = foundResult.FoundAtIndex
                        };
                        progressManager.SaveProgress(currentProgress);
                    }
                }

                // –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ
                if (foundResult != null)
                {
                    progressManager.ClearProgress();
                    LogMessage?.Invoke("üéâ –ü–†–ò–í–ê–¢–ù–´–ô –ö–õ–Æ–ß –ù–ê–ô–î–ï–ù!");
                }
                else
                {
                    LogMessage?.Invoke("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω - –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω");
                }
                
                return foundResult != null;
            }
            catch (OperationCanceledException)
            {
                LogMessage?.Invoke("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                return false;
            }
            catch (Exception ex)
            {
                LogMessage?.Invoke($"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {ex.Message}");
                return false;
            }
            finally
            {
                isRunning = false;
                cancellationTokenSource?.Dispose();
            }
        }

        public void StopSearch()
        {
            cancellationTokenSource?.Cancel();
            isRunning = false;
        }

        public bool IsRunning => isRunning;

        public SearchProgress? GetCurrentProgress()
        {
            return progressManager.LoadProgress();
        }

        public List<FoundResult> GetFoundResults()
        {
            return progressManager.LoadFoundResults();
        }

        private async Task<FoundResult?> SearchRangeAsync(long startIndex, long endIndex, KeyFormat format, NetworkType network,
            CancellationToken cancellationToken, int threadId)
        {
            var localCurrent = startIndex;

            while (localCurrent < endIndex && !cancellationToken.IsCancellationRequested)
            {
                try
                {
                    var privateKey = BitcoinKeyGenerator.GeneratePrivateKey(localCurrent, format);
                    var bitcoinAddress = BitcoinKeyGenerator.GenerateBitcoinAddress(privateKey, network);

                    if (!string.IsNullOrEmpty(bitcoinAddress))
                    {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∞–¥—Ä–µ—Å —Å —Ü–µ–ª–µ–≤—ã–º
                        if (bitcoinAddress.Equals(targetAddress, StringComparison.OrdinalIgnoreCase))
                        {
                            var result = new FoundResult
                            {
                                PrivateKey = privateKey,
                                Address = bitcoinAddress,
                                Balance = 0, // –ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
                                FoundAt = DateTime.Now,
                                FoundAtIndex = localCurrent,
                                ProcessingTime = DateTime.Now - startTime
                            };

                            LogMessage?.Invoke($"üéØ –ù–ê–ô–î–ï–ù –ü–†–ò–í–ê–¢–ù–´–ô –ö–õ–Æ–ß!");
                            LogMessage?.Invoke($"üîë –ö–ª—é—á: {privateKey}");
                            LogMessage?.Invoke($"üìç –ê–¥—Ä–µ—Å: {bitcoinAddress}");
                            LogMessage?.Invoke($"üìä –ò–Ω–¥–µ–∫—Å: {localCurrent:N0}");
                            
                            return result;
                        }
                    }

                    localCurrent++;
                    Interlocked.Increment(ref totalProcessed);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    if (currentProgress != null)
                    {
                        currentProgress.CurrentIndex = localCurrent;
                    }

                    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 1000 –∫–ª—é—á–µ–π
                    if (localCurrent - lastSavedIndex >= 1000)
                    {
                        lastSavedIndex = localCurrent;
                        if (currentProgress != null)
                        {
                            currentProgress.ElapsedTime = DateTime.Now - startTime;
                            currentProgress.LastSaved = DateTime.Now;
                            progressManager.SaveProgress(currentProgress);
                            ProgressSaved?.Invoke(currentProgress);
                        }
                    }

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–∞–∂–¥—ã–µ 100 –∫–ª—é—á–µ–π
                    if (localCurrent % 100 == 0)
                    {
                        ReportProgress(threadId, localCurrent.ToString(), bitcoinAddress);
                        await Task.Delay(1, cancellationToken); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è UI
                    }
                }
                catch (Exception ex)
                {
                    LogMessage?.Invoke($"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {threadId}: {ex.Message}");
                    localCurrent++;
                }
            }

            return null;
        }

        private async Task SaveProgressPeriodicallyAsync(CancellationToken cancellationToken)
        {
            while (!cancellationToken.IsCancellationRequested)
            {
                try
                {
                    await Task.Delay(10000, cancellationToken); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
                    
                    if (currentProgress != null)
                    {
                        currentProgress.ElapsedTime = DateTime.Now - startTime;
                        currentProgress.LastSaved = DateTime.Now;
                        progressManager.SaveProgress(currentProgress);
                        ProgressSaved?.Invoke(currentProgress);
                    }
                }
                catch (OperationCanceledException)
                {
                    break;
                }
                catch (Exception ex)
                {
                    LogMessage?.Invoke($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {ex.Message}");
                }
            }
        }

        private void ReportProgress(int threadId, string currentKey, string currentAddress)
        {
            var elapsed = DateTime.Now - startTime;
            var speed = totalProcessed / Math.Max(elapsed.TotalSeconds, 1);
            
            var progressInfo = new ProgressInfo
            {
                CurrentKey = currentKey,
                CurrentAddress = currentAddress,
                ProcessedKeys = totalProcessed,
                TotalKeys = currentProgress?.EndIndex - currentProgress?.StartIndex ?? 0,
                Progress = 0, // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                KeysPerSecond = (long)speed,
                ElapsedTime = elapsed,
                EstimatedTimeRemaining = TimeSpan.Zero, // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                Status = "–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
                TargetAddress = targetAddress
            };

            ProgressReported?.Invoke(progressInfo);
        }

        private decimal CheckKnownAddresses(string address)
        {
            // –°–ª–æ–≤–∞—Ä—å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
            var knownAddresses = new Dictionary<string, decimal>
            {
                {"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa", 68.0m}, // Genesis block
                {"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX", 0.0m},  // –ü—Ä–∏–º–µ—Ä
                {"1HLoD9E4SDFFPDiYfNYnkBLQ85Y51J3Zb1", 0.0m},  // –ü—Ä–∏–º–µ—Ä
            };

            return knownAddresses.TryGetValue(address, out var balance) ? balance : 0;
        }
    }
} 