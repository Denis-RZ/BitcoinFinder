#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace BitcoinFinderAndroidNew.Services
{
    public class TargetedKeyFinder
    {
        private readonly string targetAddress;
        private readonly DateTime walletCreationDate;
        private readonly List<string> commonPasswords;
        private readonly List<string> commonPhrases;

        public event Action<string>? LogMessage;
        public event Action<long, string, string>? ProgressReported;
        public event Action<FoundResult>? KeyFound;

        public TargetedKeyFinder(string targetAddress, DateTime? walletCreationDate = null)
        {
            this.targetAddress = targetAddress;
            this.walletCreationDate = walletCreationDate ?? DateTime.Now.AddYears(-7);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –∏ —Ñ—Ä–∞–∑—ã 2017 –≥–æ–¥–∞
            this.commonPasswords = LoadCommonPasswords2017();
            this.commonPhrases = LoadCommonPhrases2017();
        }

        // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        public async Task<FoundResult?> FindPrivateKeyAsync(CancellationToken cancellationToken = default)
        {
            LogMessage?.Invoke($"üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {targetAddress}");
            LogMessage?.Invoke($"üìÖ –ö–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä–Ω–æ: {walletCreationDate:dd.MM.yyyy}");

            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
            var knownResult = await CheckKnownAddressesAsync();
            if (knownResult != null) return knownResult;

            // 2. –°–ª–æ–≤–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (2017 –≥–æ–¥)
            LogMessage?.Invoke("üìö –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ 2017 –≥–æ–¥–∞...");
            var dictResult = await DictionarySearch2017Async(cancellationToken);
            if (dictResult != null) return dictResult;

            // 3. Brain wallet —Ñ—Ä–∞–∑—ã (2017 –≥–æ–¥)
            LogMessage?.Invoke("üß† –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã 2017 –≥–æ–¥–∞...");
            var brainResult = await BrainWalletSearch2017Async(cancellationToken);
            if (brainResult != null) return brainResult;

            // 4. –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            LogMessage?.Invoke("üî¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...");
            var simpleResult = await SimpleNumberSearchAsync(cancellationToken);
            if (simpleResult != null) return simpleResult;

            // 5. –î–∞—Ç—ã –∏ –≤—Ä–µ–º—è (2017 –≥–æ–¥)
            LogMessage?.Invoke("üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã 2017 –≥–æ–¥–∞...");
            var dateResult = await DateBasedSearchAsync(cancellationToken);
            if (dateResult != null) return dateResult;

            // 6. –°–ª—É—á–∞–π–Ω—ã–µ –∫–ª—é—á–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)
            LogMessage?.Invoke("üé≤ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–ª—é—á–∏...");
            var randomResult = await RandomKeySearchAsync(1000000, cancellationToken);
            if (randomResult != null) return randomResult;

            LogMessage?.Invoke("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö");
            return null;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        private async Task<FoundResult?> CheckKnownAddressesAsync()
        {
            var knownAddresses = new Dictionary<string, string>
            {
                { "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa", "Genesis Block" },
                { "12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX", "Test Address" },
                { "1HLoD9E4SDFFPDiYfNYnkBLQ85Y51J3Zb1", "Test Address" }
            };

            if (knownAddresses.ContainsKey(targetAddress))
            {
                LogMessage?.Invoke($"‚úÖ –ù–∞–π–¥–µ–Ω –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å: {knownAddresses[targetAddress]}");
                return new FoundResult
                {
                    PrivateKey = "KNOWN_ADDRESS",
                    BitcoinAddress = targetAddress,
                    Balance = 0,
                    FoundAt = DateTime.Now,
                    FoundAtIndex = -1
                };
            }

            return null;
        }

        // –°–ª–æ–≤–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø–∞—Ä–æ–ª—è–º–∏ 2017 –≥–æ–¥–∞
        private async Task<FoundResult?> DictionarySearch2017Async(CancellationToken cancellationToken)
        {
            foreach (var password in commonPasswords)
            {
                if (cancellationToken.IsCancellationRequested) break;

                var privateKey = GeneratePrivateKeyFromPassword(password);
                var address = BitcoinKeyGenerator.GenerateBitcoinAddress(privateKey, NetworkType.Mainnet);

                if (address.Equals(targetAddress, StringComparison.OrdinalIgnoreCase))
                {
                    LogMessage?.Invoke($"üéâ –ù–ê–ô–î–ï–ù! –ü–∞—Ä–æ–ª—å: {password}");
                    return new FoundResult
                    {
                        PrivateKey = privateKey,
                        BitcoinAddress = address,
                        Balance = 0,
                        FoundAt = DateTime.Now,
                        FoundAtIndex = -2
                    };
                }
            }

            return null;
        }

        // Brain wallet –ø–æ–∏—Å–∫ —Å —Ñ—Ä–∞–∑–∞–º–∏ 2017 –≥–æ–¥–∞
        private async Task<FoundResult?> BrainWalletSearch2017Async(CancellationToken cancellationToken)
        {
            foreach (var phrase in commonPhrases)
            {
                if (cancellationToken.IsCancellationRequested) break;

                var privateKey = GeneratePrivateKeyFromText(phrase);
                var address = BitcoinKeyGenerator.GenerateBitcoinAddress(privateKey, NetworkType.Mainnet);

                if (address.Equals(targetAddress, StringComparison.OrdinalIgnoreCase))
                {
                    LogMessage?.Invoke($"üéâ –ù–ê–ô–î–ï–ù! –§—Ä–∞–∑–∞: {phrase}");
                    return new FoundResult
                    {
                        PrivateKey = privateKey,
                        BitcoinAddress = address,
                        Balance = 0,
                        FoundAt = DateTime.Now,
                        FoundAtIndex = -3
                    };
                }
            }

            return null;
        }

        // –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ—Å—Ç—ã–º —á–∏—Å–ª–æ–≤—ã–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º
        private async Task<FoundResult?> SimpleNumberSearchAsync(CancellationToken cancellationToken)
        {
            var simpleNumbers = new[]
            {
                1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                100, 1000, 10000, 100000, 1000000,
                123, 1234, 12345, 123456, 1234567,
                111, 222, 333, 444, 555, 666, 777, 888, 999,
                2020, 2021, 2022, 2023, 2024,
                2017, 2016, 2015, 2014, 2013
            };

            foreach (var number in simpleNumbers)
            {
                if (cancellationToken.IsCancellationRequested) break;

                var privateKey = BitcoinKeyGenerator.GeneratePrivateKey(number, KeyFormat.Decimal);
                var address = BitcoinKeyGenerator.GenerateBitcoinAddress(privateKey, NetworkType.Mainnet);

                ProgressReported?.Invoke(number, privateKey, address);

                if (address.Equals(targetAddress, StringComparison.OrdinalIgnoreCase))
                {
                    LogMessage?.Invoke($"üéâ –ù–ê–ô–î–ï–ù! –ß–∏—Å–ª–æ: {number}");
                    return new FoundResult
                    {
                        PrivateKey = privateKey,
                        BitcoinAddress = address,
                        Balance = 0,
                        FoundAt = DateTime.Now,
                        FoundAtIndex = number
                    };
                }
            }

            return null;
        }

        // –ü–æ–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç 2017 –≥–æ–¥–∞
        private async Task<FoundResult?> DateBasedSearchAsync(CancellationToken cancellationToken)
        {
            var startDate = new DateTime(2017, 1, 1);
            var endDate = new DateTime(2017, 12, 31);

            for (var date = startDate; date <= endDate; date = date.AddDays(1))
            {
                if (cancellationToken.IsCancellationRequested) break;

                // –§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
                var dateFormats = new[]
                {
                    date.ToString("yyyyMMdd"),
                    date.ToString("ddMMyyyy"),
                    date.ToString("MMddyyyy"),
                    date.ToString("yyyy"),
                    date.ToString("MMdd"),
                    date.ToString("ddMM")
                };

                foreach (var format in dateFormats)
                {
                    if (long.TryParse(format, out var number))
                    {
                        var privateKey = BitcoinKeyGenerator.GeneratePrivateKey(number, KeyFormat.Decimal);
                        var address = BitcoinKeyGenerator.GenerateBitcoinAddress(privateKey, NetworkType.Mainnet);

                        ProgressReported?.Invoke(number, privateKey, address);

                        if (address.Equals(targetAddress, StringComparison.OrdinalIgnoreCase))
                        {
                            LogMessage?.Invoke($"üéâ –ù–ê–ô–î–ï–ù! –î–∞—Ç–∞: {date:dd.MM.yyyy}, —Ñ–æ—Ä–º–∞—Ç: {format}");
                            return new FoundResult
                            {
                                PrivateKey = privateKey,
                                BitcoinAddress = address,
                                Balance = 0,
                                FoundAt = DateTime.Now,
                                FoundAtIndex = number
                            };
                        }
                    }
                }
            }

            return null;
        }

        // –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        private async Task<FoundResult?> RandomKeySearchAsync(int attempts, CancellationToken cancellationToken)
        {
            using var rng = RandomNumberGenerator.Create();
            var buffer = new byte[32];

            for (int i = 0; i < attempts; i++)
            {
                if (cancellationToken.IsCancellationRequested) break;

                rng.GetBytes(buffer);
                var privateKey = Convert.ToHexString(buffer);
                var address = BitcoinKeyGenerator.GenerateBitcoinAddress(privateKey, NetworkType.Mainnet);

                if (i % 1000 == 0)
                {
                    ProgressReported?.Invoke(i, privateKey, address);
                }

                if (address.Equals(targetAddress, StringComparison.OrdinalIgnoreCase))
                {
                    LogMessage?.Invoke($"üéâ –ù–ê–ô–î–ï–ù! –ü–æ–ø—ã—Ç–∫–∞: {i}");
                    return new FoundResult
                    {
                        PrivateKey = privateKey,
                        BitcoinAddress = address,
                        Balance = 0,
                        FoundAt = DateTime.Now,
                        FoundAtIndex = i
                    };
                }
            }

            return null;
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π 2017 –≥–æ–¥–∞
        private List<string> LoadCommonPasswords2017()
        {
            return new List<string>
            {
                // –û–±—â–∏–µ –ø–∞—Ä–æ–ª–∏
                "password", "123456", "qwerty", "admin", "letmein", "welcome",
                "monkey", "dragon", "master", "football", "baseball",
                
                // –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
                "bitcoin", "wallet", "crypto", "blockchain", "satoshi", "nakamoto",
                "hodl", "moon", "lambo", "diamond", "hands", "rocket",
                "mars", "jupiter", "saturn", "uranus", "neptune",
                
                // 2017 –≥–æ–¥
                "2017", "2016", "2015", "2014", "2013",
                
                // –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
                "password123", "admin123", "user123", "test123",
                "bitcoin123", "wallet123", "crypto123",
                
                // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤ 2017
                "trustno1", "shadow", "michael", "jennifer", "jordan",
                "hunter", "michelle", "charlie", "andrew", "matthew",
                "joshua", "ashley", "amanda", "daniel", "jessica",
                
                // –†—É—Å—Å–∫–∏–µ –ø–∞—Ä–æ–ª–∏
                "–ø–∞—Ä–æ–ª—å", "123456789", "qwerty123", "admin123",
                "–±–∏—Ç–∫–æ–∏–Ω", "–∫–æ—à–µ–ª–µ–∫", "–∫—Ä–∏–ø—Ç–∞", "–±–ª–æ–∫—á–µ–π–Ω"
            };
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑ 2017 –≥–æ–¥–∞
        private List<string> LoadCommonPhrases2017()
        {
            return new List<string>
            {
                // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã
                "correct horse battery staple",
                "to be or not to be",
                "the quick brown fox",
                "hello world",
                
                // –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã 2017
                "bitcoin is the future",
                "hodl the line",
                "diamond hands",
                "to the moon",
                "buy the dip",
                "not financial advice",
                "this is the way",
                "ape together strong",
                "wen lambo",
                "gm",
                "wagmi",
                "ngmi",
                
                // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤ 2017
                "make america great again",
                "fake news",
                "covfefe",
                "sad",
                "bigly",
                "tremendous",
                
                // –ü—Ä–æ—Å—Ç—ã–µ —Ñ—Ä–∞–∑—ã
                "test phrase",
                "my wallet",
                "private key",
                "secret phrase",
                "backup phrase",
                "recovery phrase",
                
                // –†—É—Å—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã
                "–±–∏—Ç–∫–æ–∏–Ω —ç—Ç–æ –±—É–¥—É—â–µ–µ",
                "—Ö–æ–ª–¥ –ª–∏–Ω–∏—é",
                "–∞–ª–º–∞–∑–Ω—ã–µ —Ä—É–∫–∏",
                "–∫ –ª—É–Ω–µ",
                "–ø–æ–∫—É–ø–∞–π –ø—Ä–æ–≤–∞–ª",
                "–Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç"
            };
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –ø–∞—Ä–æ–ª—è
        private string GeneratePrivateKeyFromPassword(string password)
        {
            using var sha256 = SHA256.Create();
            var hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));
            return Convert.ToHexString(hash);
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        private string GeneratePrivateKeyFromText(string text)
        {
            using var sha256 = SHA256.Create();
            var hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(text));
            return Convert.ToHexString(hash);
        }
    }
} 