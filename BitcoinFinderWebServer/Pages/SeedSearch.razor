@page "/seed-search"
@using BitcoinFinderWebServer.Models
@using BitcoinFinderWebServer.Services
@inject TaskManager TaskManager
@inject SeedPhraseFinder SeedPhraseFinder
@inject ILogger<SeedSearch> Logger
@inject NavigationManager NavigationManager

<PageTitle>–ü–æ–∏—Å–∫ Seed-—Ñ—Ä–∞–∑ - BitcoinFinder</PageTitle>

<div class="container-fluid">
    <h1>üîç –ü–æ–∏—Å–∫ Seed-—Ñ—Ä–∞–∑</h1>
    
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ø–æ–∏—Å–∫–∞</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="targetAddress" class="form-label">–¶–µ–ª–µ–≤–æ–π –∞–¥—Ä–µ—Å Bitcoin *</label>
                        <input type="text" class="form-control" id="targetAddress" 
                               @bind="targetAddress" placeholder="1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa" />
                        <div class="form-text">–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å Bitcoin, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ seed-—Ñ—Ä–∞–∑—É</div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="wordCount" class="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤</label>
                        <select class="form-select" id="wordCount" @bind="wordCount">
                            <option value="12">12 —Å–ª–æ–≤ (BIP39)</option>
                            <option value="24">24 —Å–ª–æ–≤–∞ (BIP39)</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label for="knownWords" class="form-label">–ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                        <input type="text" class="form-control" id="knownWords" 
                               @bind="knownWords" placeholder="abandon ability able" />
                        <div class="form-text">–ï—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∂–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="threads" class="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤</label>
                        <input type="number" class="form-control" id="threads" 
                               @bind="threads" min="1" max="32" />
                    </div>
                    
                    <button class="btn btn-primary" @onclick="CreateSearchTask" disabled="@isCreating">
                        @if (isCreating)
                        {
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                            <span>–°–æ–∑–¥–∞–Ω–∏–µ...</span>
                        }
                        else
                        {
                            <span>üöÄ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫</span>
                        }
                    </button>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</h5>
                </div>
                <div class="card-body">
                    @if (activeTasks.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>–ê–¥—Ä–µ—Å</th>
                                        <th>–°—Ç–∞—Ç—É—Å</th>
                                        <th>–ü—Ä–æ–≥—Ä–µ—Å—Å</th>
                                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var task in activeTasks)
                                    {
                                        <tr>
                                            <td>@task.Parameters.TargetAddress.Substring(0, 10)...</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(task.Status)">
                                                    @task.Status
                                                </span>
                                            </td>
                                            <td>
                                                <div class="progress" style="height: 20px;">
                                                    <div class="progress-bar" style="width: @((int)(task.Progress * 100))%">
                                                        @((task.Progress * 100).ToString("F2"))%
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewTaskDetails(task.Id)">
                                                    –î–µ—Ç–∞–ª–∏
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á</p>
                    }
                </div>
            </div>
        </div>
    </div>
    
    @if (currentTask != null)
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: @currentTask.Parameters.TargetAddress</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h6>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π</h6>
                                    <h3 class="text-primary">@currentTask.ProcessedCombinations:N0</h3>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h6>–í—Å–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π</h6>
                                    <h3 class="text-info">@currentTask.TotalCombinations:N0</h3>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h6>–°–∫–æ—Ä–æ—Å—Ç—å</h6>
                                    <h3 class="text-success">@GetSpeedText()</h3>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h6>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</h6>
                                    <h3 class="text-warning">@GetUptimeText()</h3>
                                </div>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(currentCombination))
                        {
                            <div class="mt-3">
                                <h6>–¢–µ–∫—É—â–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è:</h6>
                                <div class="alert alert-info">
                                    <code>@currentCombination</code>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string targetAddress = "";
    private int wordCount = 12;
    private string knownWords = "";
    private int threads = 4;
    private bool isCreating = false;
    private List<SearchTask> activeTasks = new();
    private SearchTask? currentTask;
    private string currentCombination = "";
    private Timer? updateTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadActiveTasks();
        StartUpdateTimer();
    }

    private async Task CreateSearchTask()
    {
        if (string.IsNullOrWhiteSpace(targetAddress))
        {
            // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
            return;
        }

        isCreating = true;
        StateHasChanged();

        try
        {
            var parameters = new SearchParameters
            {
                TargetAddress = targetAddress.Trim(),
                KnownWords = knownWords.Trim(),
                WordCount = wordCount,
                Language = "english",
                StartIndex = 0,
                EndIndex = 0,
                BatchSize = 1000,
                BlockSize = 100000
            };

            var task = await TaskManager.CreateTaskAsync($"–ü–æ–∏—Å–∫ –¥–ª—è {targetAddress}", parameters);
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            targetAddress = "";
            knownWords = "";
            
            await LoadActiveTasks();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏");
        }
        finally
        {
            isCreating = false;
            StateHasChanged();
        }
    }

    private async Task LoadActiveTasks()
    {
        try
        {
            var tasks = await TaskManager.GetAllTasksAsync();
            activeTasks = tasks.Where(t => t.Status != "Completed").ToList();
            
            currentTask = activeTasks.FirstOrDefault();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á");
        }
    }

    private void ViewTaskDetails(string taskId)
    {
        NavigationManager.NavigateTo($"/task-details/{taskId}");
    }

    private string GetStatusBadgeClass(string status) => status switch
    {
        "Running" => "bg-success",
        "Pending" => "bg-warning",
        "Completed" => "bg-primary",
        "Failed" => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetSpeedText()
    {
        if (currentTask == null) return "0 –∫–æ–º–±/—Å";
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        return "1,234 –∫–æ–º–±/—Å";
    }

    private string GetUptimeText()
    {
        if (currentTask?.StartedAt == null) return "00:00:00";
        var uptime = DateTime.UtcNow - currentTask.StartedAt.Value;
        return uptime.ToString(@"hh\:mm\:ss");
    }

    private void StartUpdateTimer()
    {
        updateTimer = new Timer(async _ =>
        {
            await LoadActiveTasks();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
    }

    public void Dispose()
    {
        updateTimer?.Dispose();
    }
} 