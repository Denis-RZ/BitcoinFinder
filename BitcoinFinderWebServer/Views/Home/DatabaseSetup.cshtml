@{
    Layout = "_Layout";
    ViewData["Title"] = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö";
}
<style>
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    padding: 20px;
}
.container {
    max-width: 1200px;
    margin: 0 auto;
    background: white;
    border-radius: 15px;
    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
    overflow: hidden;
}
.header {
    background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
    color: white;
    padding: 30px;
    text-align: center;
}
.header h1 {
    font-size: 2.5em;
    margin-bottom: 10px;
}
.header p {
    font-size: 1.1em;
    opacity: 0.9;
}
.content {
    padding: 40px;
}
.form-section {
    margin-bottom: 40px;
    padding: 30px;
    border: 1px solid #e1e8ed;
    border-radius: 10px;
    background: #f8f9fa;
}
.form-section h2 {
    color: #2c3e50;
    margin-bottom: 20px;
    font-size: 1.5em;
}
.form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
}
.form-group {
    margin-bottom: 20px;
}
.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: #2c3e50;
}
.form-group input, .form-group select {
    width: 100%;
    padding: 12px;
    border: 2px solid #e1e8ed;
    border-radius: 8px;
    font-size: 14px;
    transition: border-color 0.3s ease;
}
.form-group input:focus, .form-group select:focus {
    outline: none;
    border-color: #667eea;
}
.checkbox-group {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 15px;
}
.checkbox-group input[type="checkbox"] {
    width: auto;
    margin: 0;
}
.btn {
    padding: 12px 24px;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-block;
    text-align: center;
}
.btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}
.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
}
.btn-success {
    background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
    color: white;
}
.btn-warning {
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    color: white;
}
.btn-danger {
    background: linear-gradient(135deg, #ff416c 0%, #ff4b2b 100%);
    color: white;
}
.btn-info {
    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    color: white;
}
.tabs {
    display: flex;
    border-bottom: 2px solid #e1e8ed;
    margin-bottom: 30px;
    overflow-x: auto;
}
.tab {
    padding: 15px 25px;
    background: #f8f9fa;
    border: none;
    cursor: pointer;
    font-weight: 600;
    color: #6c757d;
    transition: all 0.3s ease;
    white-space: nowrap;
    border-radius: 8px 8px 0 0;
    margin-right: 5px;
}
.tab:hover {
    background: #e9ecef;
    color: #495057;
}
.tab.active {
    background: #667eea;
    color: white;
}
.tab-content {
    display: none;
}
.tab-content.active {
    display: block;
}
.status-card {
    background: white;
    border: 1px solid #e1e8ed;
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}
.status-card h3 {
    color: #2c3e50;
    margin-bottom: 15px;
    font-size: 1.2em;
}
.status-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 0;
    border-bottom: 1px solid #f1f3f4;
}
.status-item:last-child {
    border-bottom: none;
}
.status-label {
    font-weight: 600;
    color: #495057;
}
.status-value {
    color: #6c757d;
}
.status-value.success {
    color: #28a745;
}
.status-value.error {
    color: #dc3545;
}
.status-value.warning {
    color: #ffc107;
}
.log-container {
    background: #1e1e1e;
    color: #00ff00;
    padding: 20px;
    border-radius: 8px;
    font-family: 'Courier New', monospace;
    font-size: 12px;
    max-height: 300px;
    overflow-y: auto;
    margin-top: 20px;
}
.log-entry {
    margin-bottom: 5px;
    padding: 2px 0;
}
.log-entry.error {
    color: #ff6b6b;
}
.log-entry.warning {
    color: #ffd93d;
}
.log-entry.info {
    color: #4ecdc4;
}
.alert {
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 20px;
    border: 1px solid transparent;
}
.alert-success {
    background-color: #d4edda;
    border-color: #c3e6cb;
    color: #155724;
}
.alert-danger {
    background-color: #f8d7da;
    border-color: #f5c6cb;
    color: #721c24;
}
.alert-warning {
    background-color: #fff3cd;
    border-color: #ffeaa7;
    color: #856404;
}
.alert-info {
    background-color: #d1ecf1;
    border-color: #bee5eb;
    color: #0c5460;
}
.loading {
    display: none;
    text-align: center;
    padding: 20px;
}
.spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #667eea;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 0 auto 10px;
}
@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>

<div class="container">
    <div class="header">
        <h1>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö</h1>
        <p>BitcoinFinder Web Server - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</p>
    </div>
    <div class="content">
        <div class="tabs">
            <div class="tab active" onclick="showTab('setup')">–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ë–î</div>
            <div class="tab" onclick="showTab('seed')">–ü–µ—Ä–µ–±–æ—Ä Seed-—Ñ—Ä–∞–∑</div>
            <div class="tab" onclick="showTab('agents')">–ê–≥–µ–Ω—Ç—ã</div>
            <div class="tab" onclick="showTab('status')">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</div>
            <div class="tab" onclick="showTab('keepalive')">Keep-Alive</div>
            <div class="tab" onclick="showTab('cron')">Cron API</div>
        </div>

        <!-- –í–∫–ª–∞–¥–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö -->
        <div id="setup" class="tab-content active">
            <div class="form-section">
                <h2>üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h2>
                <div class="form-grid">
                    <div class="form-group">
                        <label for="databaseName">–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö *</label>
                        <input type="text" id="databaseName" value="BitcoinFinderDB" required>
                    </div>
                    <div class="form-group">
                        <label for="server">–°–µ—Ä–≤–µ—Ä *</label>
                        <input type="text" id="server" value="localhost" required>
                    </div>
                    <div class="form-group">
                        <label for="port">–ü–æ—Ä—Ç *</label>
                        <input type="number" id="port" value="1433" min="1" max="65535" required>
                    </div>
                    <div class="form-group">
                        <label for="username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                        <input type="text" id="username" placeholder="sa">
                    </div>
                    <div class="form-group">
                        <label for="password">–ü–∞—Ä–æ–ª—å</label>
                        <input type="password" id="password" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å">
                    </div>
                    <div class="form-group">
                        <label for="authType">–¢–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</label>
                        <select id="authType" onchange="toggleAuthFields()">
                            <option value="sql">SQL Server Authentication</option>
                            <option value="windows">Windows Authentication</option>
                        </select>
                    </div>
                </div>
                <div class="checkbox-group">
                    <input type="checkbox" id="createDatabase" checked>
                    <label for="createDatabase">–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</label>
                </div>
                <div class="checkbox-group">
                    <input type="checkbox" id="createTables" checked>
                    <label for="createTables">–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç</label>
                </div>
                <div class="checkbox-group">
                    <input type="checkbox" id="insertSampleData">
                    <label for="insertSampleData">–í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</label>
                </div>
                <button class="btn btn-primary" onclick="testConnection()">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</button>
                <button class="btn btn-success" onclick="setupDatabase()">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</button>
            </div>
        </div>

        <!-- –í–∫–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–±–æ—Ä–∞ seed-—Ñ—Ä–∞–∑ -->
        <div id="seed" class="tab-content">
            <div class="form-section">
                <h2>üîç –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–±–æ—Ä–∞</h2>
                <div class="form-grid">
                    <div class="form-group">
                        <label for="taskName">–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ *</label>
                        <input type="text" id="taskName" value="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞" required>
                    </div>
                    <div class="form-group">
                        <label for="targetAddress">–¶–µ–ª–µ–≤–æ–π Bitcoin –∞–¥—Ä–µ—Å *</label>
                        <input type="text" id="targetAddress" value="1MCirzugBCrn5H6jHix6PJSLX7EqUEniBQ" required>
                    </div>
                    <div class="form-group">
                        <label for="wordCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤</label>
                        <select id="wordCount">
                            <option value="12">12 —Å–ª–æ–≤</option>
                            <option value="24">24 —Å–ª–æ–≤–∞</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="startIndex">–ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å</label>
                        <input type="number" id="startIndex" value="0" min="0">
                    </div>
                    <div class="form-group">
                        <label for="endIndex">–ö–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å</label>
                        <input type="number" id="endIndex" value="100000" min="0">
                    </div>
                    <div class="form-group">
                        <label for="blockSize">–†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞</label>
                        <input type="number" id="blockSize" value="10000" min="1000" max="100000">
                    </div>
                </div>
                <button class="btn btn-primary" onclick="createTask()">–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</button>
                <button class="btn btn-success" onclick="createAndStartTask()">–°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å</button>
            </div>
        </div>

        <!-- –í–∫–ª–∞–¥–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ -->
        <div id="agents" class="tab-content">
            <div class="form-section">
                <h2>ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏</h2>
                <div class="status-card">
                    <h3>–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤</h3>
                    <div id="agentsStatus">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                </div>
                <button class="btn btn-info" onclick="refreshAgentsStatus()">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
                <button class="btn btn-warning" onclick="disconnectAllAgents()">–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤</button>
            </div>
        </div>

        <!-- –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã -->
        <div id="status" class="tab-content">
            <div class="form-section">
                <h2>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h2>
                <div class="status-card">
                    <h3>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                    <div id="systemStatus">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                </div>
                <div class="status-card">
                    <h3>–ó–∞–¥–∞—á–∏</h3>
                    <div id="tasksStatus">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                </div>
                <button class="btn btn-info" onclick="refreshSystemStatus()">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
            </div>
        </div>

        <!-- –í–∫–ª–∞–¥–∫–∞ Keep-Alive -->
        <div id="keepalive" class="tab-content">
            <div class="form-section">
                <h2>üíì Keep-Alive —Å–∏—Å—Ç–µ–º–∞</h2>
                <div class="status-card">
                    <h3>–°—Ç–∞—Ç—É—Å Keep-Alive</h3>
                    <div id="keepAliveStatus">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                </div>
                <button class="btn btn-primary" onclick="testKeepAlive()">–¢–µ—Å—Ç Keep-Alive</button>
                <button class="btn btn-success" onclick="testHealth()">–¢–µ—Å—Ç Health Check</button>
                <div class="log-container" id="keepAliveLog"></div>
            </div>
        </div>

        <!-- –í–∫–ª–∞–¥–∫–∞ Cron API -->
        <div id="cron" class="tab-content">
            <div class="form-section">
                <h2>‚è∞ Cron API</h2>
                <div class="status-card">
                    <h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints</h3>
                    <div class="status-item">
                        <span class="status-label">GET /api/cron/ping</span>
                        <span class="status-value">–û—Å–Ω–æ–≤–Ω–æ–π ping –¥–ª—è cron</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">GET /api/cron/tasks-status</span>
                        <span class="status-value">–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">POST /api/cron/create-task</span>
                        <span class="status-value">–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">POST /api/cron/reset-pool</span>
                        <span class="status-value">–°–±—Ä–æ—Å –ø—É–ª–∞</span>
                    </div>
                </div>
                <h3>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è cron</h3>
                <div class="form-group">
                    <label>Ping –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç:</label>
                    <input type="text" value="*/15 * * * * curl -s &quot;https://your-domain.com/api/cron/ping&quot; > /dev/null 2>&1" readonly>
                </div>
                <div class="form-group">
                    <label>Health check –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç:</label>
                    <input type="text" value="*/30 * * * * curl -s &quot;https://your-domain.com/api/keep-alive/health&quot; > /dev/null 2>&1" readonly>
                </div>
                <div class="form-group">
                    <label>–°–±—Ä–æ—Å –ø—É–ª–∞ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞:</label>
                    <input type="text" value="0 */2 * * * curl -s -X POST &quot;https://your-domain.com/api/cron/reset-pool&quot; > /dev/null 2>&1" readonly>
                </div>
                <button class="btn btn-primary" onclick="testCronPing()">–¢–µ—Å—Ç Cron Ping</button>
                <button class="btn btn-success" onclick="testCronTasksStatus()">–¢–µ—Å—Ç Tasks Status</button>
                <div class="log-container" id="cronLog"></div>
            </div>
        </div>

        <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ -->
        <div class="loading" id="loading">
            <div class="spinner"></div>
            <p>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è...</p>
        </div>

        <!-- –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π -->
        <div class="log-container" id="operationLog"></div>
    </div>
</div>

<script>
function showTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    const tabContents = document.querySelectorAll('.tab-content');
    tabContents.forEach(content => content.classList.remove('active'));
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —Ç–∞–±–æ–≤
    const tabs = document.querySelectorAll('.tab');
    tabs.forEach(tab => tab.classList.remove('active'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.getElementById(tabName).classList.add('active');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–∞–±—É
    event.target.classList.add('active');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
    loadTabData(tabName);
}

function loadTabData(tabName) {
    switch(tabName) {
        case 'agents':
            refreshAgentsStatus();
            break;
        case 'status':
            refreshSystemStatus();
            break;
        case 'keepalive':
            testKeepAlive();
            break;
    }
}

function toggleAuthFields() {
    const authType = document.getElementById('authType').value;
    const usernameField = document.getElementById('username');
    const passwordField = document.getElementById('password');
    
    if (authType === 'windows') {
        usernameField.disabled = true;
        passwordField.disabled = true;
        usernameField.value = '';
        passwordField.value = '';
    } else {
        usernameField.disabled = false;
        passwordField.disabled = false;
    }
}

function showLoading() {
    document.getElementById('loading').style.display = 'block';
}

function hideLoading() {
    document.getElementById('loading').style.display = 'none';
}

function addLog(message, type = 'info') {
    const log = document.getElementById('operationLog');
    const timestamp = new Date().toLocaleTimeString();
    const entry = document.createElement('div');
    entry.className = `log-entry ${type}`;
    entry.textContent = `[${timestamp}] ${message}`;
    log.appendChild(entry);
    log.scrollTop = log.scrollHeight;
}

function addKeepAliveLog(message, type = 'info') {
    const log = document.getElementById('keepAliveLog');
    const timestamp = new Date().toLocaleTimeString();
    const entry = document.createElement('div');
    entry.className = `log-entry ${type}`;
    entry.textContent = `[${timestamp}] ${message}`;
    log.appendChild(entry);
    log.scrollTop = log.scrollHeight;
}

function addCronLog(message, type = 'info') {
    const log = document.getElementById('cronLog');
    const timestamp = new Date().toLocaleTimeString();
    const entry = document.createElement('div');
    entry.className = `log-entry ${type}`;
    entry.textContent = `[${timestamp}] ${message}`;
    log.appendChild(entry);
    log.scrollTop = log.scrollHeight;
}

async function testConnection() {
    showLoading();
    addLog('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...', 'info');
    
    try {
        const config = {
            databaseName: document.getElementById('databaseName').value,
            server: document.getElementById('server').value,
            port: parseInt(document.getElementById('port').value),
            username: document.getElementById('username').value,
            password: document.getElementById('password').value,
            authType: document.getElementById('authType').value
        };
        
        const response = await fetch('/api/database/test-connection', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(config)
        });
        
        const result = await response.json();
        
        if (result.success) {
            addLog('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!', 'info');
        } else {
            addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${result.message}`, 'error');
        }
    } catch (error) {
        addLog(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        hideLoading();
    }
}

async function setupDatabase() {
    showLoading();
    addLog('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', 'info');
    
    try {
        const config = {
            databaseName: document.getElementById('databaseName').value,
            server: document.getElementById('server').value,
            port: parseInt(document.getElementById('port').value),
            username: document.getElementById('username').value,
            password: document.getElementById('password').value,
            authType: document.getElementById('authType').value,
            createDatabase: document.getElementById('createDatabase').checked,
            createTables: document.getElementById('createTables').checked,
            insertSampleData: document.getElementById('insertSampleData').checked
        };
        
        const response = await fetch('/api/database/setup', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(config)
        });
        
        const result = await response.json();
        
        if (result.success) {
            addLog('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!', 'info');
        } else {
            addLog(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${result.message}`, 'error');
        }
    } catch (error) {
        addLog(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        hideLoading();
    }
}

async function createTask() {
    showLoading();
    addLog('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...', 'info');
    
    try {
        const taskData = {
            name: document.getElementById('taskName').value,
            targetAddress: document.getElementById('targetAddress').value,
            wordCount: parseInt(document.getElementById('wordCount').value),
            startIndex: parseInt(document.getElementById('startIndex').value),
            endIndex: parseInt(document.getElementById('endIndex').value),
            blockSize: parseInt(document.getElementById('blockSize').value),
            threads: 1,
            autoStart: false
        };
        
        const response = await fetch('/api/cron/create-task', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(taskData)
        });
        
        const result = await response.json();
        
        if (result.success) {
            addLog(`‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: ${result.taskId}`, 'info');
        } else {
            addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${result.error}`, 'error');
        }
    } catch (error) {
        addLog(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        hideLoading();
    }
}

async function createAndStartTask() {
    showLoading();
    addLog('–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏...', 'info');
    
    try {
        const taskData = {
            name: document.getElementById('taskName').value,
            targetAddress: document.getElementById('targetAddress').value,
            wordCount: parseInt(document.getElementById('wordCount').value),
            startIndex: parseInt(document.getElementById('startIndex').value),
            endIndex: parseInt(document.getElementById('endIndex').value),
            blockSize: parseInt(document.getElementById('blockSize').value),
            threads: 1,
            autoStart: true
        };
        
        const response = await fetch('/api/cron/create-task', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(taskData)
        });
        
        const result = await response.json();
        
        if (result.success) {
            addLog(`‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞! ID: ${result.taskId}`, 'info');
        } else {
            addLog(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`, 'error');
        }
    } catch (error) {
        addLog(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
        hideLoading();
    }
}

async function refreshAgentsStatus() {
    try {
        const response = await fetch('/api/agents/status');
        const data = await response.json();
        
        const statusDiv = document.getElementById('agentsStatus');
        statusDiv.innerHTML = `
            <div class="status-item">
                <span class="status-label">–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤:</span>
                <span class="status-value">${data.activeAgents || 0}</span>
            </div>
            <div class="status-item">
                <span class="status-label">–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤:</span>
                <span class="status-value">${data.totalAgents || 0}</span>
            </div>
        `;
    } catch (error) {
        document.getElementById('agentsStatus').innerHTML = `<span class="status-value error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</span>`;
    }
}

async function refreshSystemStatus() {
    try {
        const response = await fetch('/api/cron/tasks-status');
        const data = await response.json();
        
        const systemStatusDiv = document.getElementById('systemStatus');
        const tasksStatusDiv = document.getElementById('tasksStatus');
        
        systemStatusDiv.innerHTML = `
            <div class="status-item">
                <span class="status-label">–í—Å–µ–≥–æ –∑–∞–¥–∞—á:</span>
                <span class="status-value">${data.totalTasks || 0}</span>
            </div>
            <div class="status-item">
                <span class="status-label">–ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:</span>
                <span class="status-value">${data.runningTasks || 0}</span>
            </div>
        `;
        
        if (data.tasks && data.tasks.length > 0) {
            tasksStatusDiv.innerHTML = data.tasks.map(task => `
                <div class="status-item">
                    <span class="status-label">${task.name}</span>
                    <span class="status-value ${task.status === 'Running' ? 'success' : 'warning'}">${task.status}</span>
                </div>
            `).join('');
        } else {
            tasksStatusDiv.innerHTML = '<span class="status-value">–ù–µ—Ç –∑–∞–¥–∞—á</span>';
        }
    } catch (error) {
        document.getElementById('systemStatus').innerHTML = `<span class="status-value error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</span>`;
        document.getElementById('tasksStatus').innerHTML = `<span class="status-value error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</span>`;
    }
}

async function testKeepAlive() {
    addKeepAliveLog('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Keep-Alive...', 'info');
    
    try {
        const response = await fetch('/api/keep-alive');
        const data = await response.json();
        
        addKeepAliveLog(`‚úÖ Keep-Alive OK - Memory: ${data.memoryUsage}MB, Uptime: ${data.uptime}`, 'info');
    } catch (error) {
        addKeepAliveLog(`‚ùå Keep-Alive FAILED: ${error.message}`, 'error');
    }
}

async function testHealth() {
    addKeepAliveLog('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Health Check...', 'info');
    
    try {
        const response = await fetch('/api/keep-alive/health');
        const data = await response.json();
        
        addKeepAliveLog(`‚úÖ Health OK - Status: ${data.status}`, 'info');
    } catch (error) {
        addKeepAliveLog(`‚ùå Health FAILED: ${error.message}`, 'error');
    }
}

async function testCronPing() {
    addCronLog('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cron Ping...', 'info');
    
    try {
        const response = await fetch('/api/cron/ping');
        const data = await response.json();
        
        addCronLog(`‚úÖ Cron Ping OK - Status: ${data.status}, Memory: ${data.memoryUsage}MB`, 'info');
    } catch (error) {
        addCronLog(`‚ùå Cron Ping FAILED: ${error.message}`, 'error');
    }
}

async function testCronTasksStatus() {
    addCronLog('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tasks Status...', 'info');
    
    try {
        const response = await fetch('/api/cron/tasks-status');
        const data = await response.json();
        
        addCronLog(`‚úÖ Tasks Status OK - Total: ${data.totalTasks}, Running: ${data.runningTasks}`, 'info');
    } catch (error) {
        addCronLog(`‚ùå Tasks Status FAILED: ${error.message}`, 'error');
    }
}

async function disconnectAllAgents() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤?')) {
        addLog('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤...', 'warning');
        
        try {
            const response = await fetch('/api/agents/disconnect-all', {
                method: 'POST'
            });
            
            const result = await response.json();
            
            if (result.success) {
                addLog('‚úÖ –í—Å–µ –∞–≥–µ–Ω—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã', 'info');
                refreshAgentsStatus();
            } else {
                addLog(`‚ùå –û—à–∏–±–∫–∞: ${result.message}`, 'error');
            }
        } catch (error) {
            addLog(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    addLog('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'info');
    refreshSystemStatus();
});
</script> 