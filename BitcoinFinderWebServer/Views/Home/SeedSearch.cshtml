@{
    Layout = "_Layout";
    ViewData["Title"] = "Поиск Seed Phrase";
}
<div class="row">
    <div class="col-md-12">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h2>Поиск Seed Phrase</h2>
                <p>Создание новой задачи поиска по адресу</p>
            </div>
            <a href="/Home/TaskManager" class="btn btn-outline-primary">
                <i class="fas fa-tasks"></i> Управление задачами
            </a>
        </div>
    </div>
</div>
<div class="row mt-4">
    <div class="col-md-8">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Параметры поиска</h5>
                <form id="searchForm">
                    <div class="mb-3">
                        <label for="targetAddress" class="form-label">Целевой адрес</label>
                        <input type="text" class="form-control" id="targetAddress" name="targetAddress" placeholder="1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa" required>
                        <div class="form-text">Bitcoin адрес для поиска</div>
                    </div>
                    <div class="mb-3">
                        <label for="wordCount" class="form-label">Количество слов</label>
                        <input type="number" class="form-control" id="wordCount" name="wordCount" value="12" min="1" max="24">
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="threads" class="form-label">Количество потоков</label>
                                <input type="number" class="form-control" id="threads" name="threads" value="4" min="1" max="16">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="maxAttempts" class="form-label">Максимум попыток</label>
                                <input type="number" class="form-control" id="maxAttempts" name="maxAttempts" value="1000000" min="1000">
                            </div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Начать поиск</button>
                    <button type="button" class="btn btn-secondary" onclick="clearForm()">Очистить</button>
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Статус поиска</h5>
                <div id="searchStatus">
                    <p class="text-muted">Поиск не запущен</p>
                </div>
                <div id="searchProgress" style="display: none;">
                    <div class="progress mb-3">
                        <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                    </div>
                    <p id="progressText">Попыток: 0</p>
                    <button type="button" class="btn btn-danger" onclick="stopSearch()">Остановить</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row mt-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Лог поиска</h5>
                <div id="searchLog" style="height: 200px; overflow-y: auto; background-color: #f8f9fa; padding: 10px; font-family: monospace;">
                    <p class="text-muted">Лог будет отображаться здесь...</p>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <b>Обработанные фразы</b>
                        <span class="badge bg-primary ms-2" id="phraseCount">0</span>
                        <span class="badge bg-success ms-1" id="speedBadge">0 фраз/сек</span>
                    </div>
                    <div>
                        <button type="button" class="btn btn-sm btn-outline-secondary" onclick="clearLiveLog()">Очистить</button>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div id="liveLogContainer" style="height: 600px; overflow-y: auto; background-color: #f8f9fa; padding: 10px; font-family: 'Courier New', monospace; font-size: 11px;">
                    <p class="text-muted">Ожидание данных...</p>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card mt-4">
    <div class="card-header"><b>Текущие перебираемые фразы (старый формат)</b></div>
    <div class="card-body">
        <div id="currentPhrasesBlock">
            <div>Загрузка...</div>
        </div>
    </div>
</div>
<script>
let currentTaskId = null;
let pollingInterval = null;
function clearForm() {
    document.getElementById('searchForm').reset();
    document.getElementById('searchStatus').innerHTML = '<p class="text-muted">Поиск не запущен</p>';
    document.getElementById('searchProgress').style.display = 'none';
    document.getElementById('searchLog').innerHTML = '<p class="text-muted">Лог будет отображаться здесь...</p>';
    if (pollingInterval) clearInterval(pollingInterval);
}
function addLog(message) {
    const log = document.getElementById('searchLog');
    const time = new Date().toLocaleTimeString();
    log.innerHTML += `<div>[${time}] ${message}</div>`;
    log.scrollTop = log.scrollHeight;
}
document.getElementById('searchForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const formData = new FormData(this);
    const data = Object.fromEntries(formData);
    addLog('Запуск поиска...');
    document.getElementById('searchStatus').innerHTML = '<p class="text-success">Поиск запущен</p>';
    document.getElementById('searchProgress').style.display = 'block';
    fetch('/api/task/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            Name: 'SeedSearch',
            TargetAddress: data.targetAddress,
            KnownWords: '',
            WordCount: Number(data.wordCount),
            Language: 'english',
            StartIndex: 0,
            EndIndex: 0,
            BatchSize: Number(data.maxAttempts),
            BlockSize: 100000,
            Threads: Number(data.threads)
        })
    })
    .then(async response => {
        const text = await response.text();
        let result = {};
        try {
            result = text ? JSON.parse(text) : {};
        } catch (e) {
            addLog('Ошибка парсинга JSON: ' + e.message);
            return;
        }
        if (result.Success || result.success) {
            const taskId = result.TaskId || result.taskId;
            addLog(`Задача создана: ${taskId}`);
            currentTaskId = taskId;
            
            // Автоматически запускаем задачу
            fetch(`/api/task/task/${taskId}/start`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            })
            .then(async response => {
                const startResult = await response.text();
                try {
                    const parsed = JSON.parse(startResult);
                    if (parsed.Success || parsed.success) {
                        addLog('Задача запущена в фоновом режиме');
                        startPolling();
                    } else {
                        addLog('Ошибка запуска задачи: ' + (parsed.Message || parsed.message));
                    }
                } catch (e) {
                    addLog('Ошибка парсинга ответа запуска: ' + e.message);
                }
            })
            .catch(error => {
                addLog('Ошибка запуска задачи: ' + error.message);
            });
        } else {
            addLog('Ошибка создания задачи: ' + (result.Message || result.message || 'Unknown error'));
            addLog('Детали ошибки: ' + JSON.stringify(result, null, 2));
        }
    })
    .catch(error => {
        addLog(`Ошибка: ${error.message}`);
    });
});
function startPolling() {
    if (pollingInterval) clearInterval(pollingInterval);
    pollingInterval = setInterval(() => {
        if (!currentTaskId) return;
        fetch(`/api/task/${currentTaskId}`)
            .then(async response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                const text = await response.text();
                if (!text) {
                    throw new Error('Empty response from server');
                }
                return JSON.parse(text);
            })
            .then(task => {
                // Логируем ответ для отладки
                console.log('Task API response:', task);
                // Универсально ищем поле прогресса
                const processed = task.ProcessedCombinations ?? task.processedCombinations ?? 0;
                document.getElementById('progressText').innerText = `Попыток: ${processed}`;
                addLog(`Проверено комбинаций: ${processed}`);
                if (task.Status === 'Completed' || task.status === 'Completed') {
                    addLog('Поиск завершён.');
                    if (task.FoundSeedPhrase || task.foundSeedPhrase) {
                        addLog('Найдено! Seed: ' + (task.FoundSeedPhrase || task.foundSeedPhrase) + ', Address: ' + (task.FoundAddress || task.foundAddress));
                    }
                    clearInterval(pollingInterval);
                }
            })
            .catch(error => {
                console.error('Polling error:', error);
                addLog(`Ошибка опроса: ${error.message}`);
            });
    }, 2000);
}
function stopSearch() {
    addLog('Остановка поиска...');
    document.getElementById('searchStatus').innerHTML = '<p class="text-muted">Поиск остановлен</p>';
    document.getElementById('searchProgress').style.display = 'none';
    if (pollingInterval) clearInterval(pollingInterval);
}
function updateCurrentPhrases() {
  fetch('/api/task/progress/current')
    .then(async response => {
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      const text = await response.text();
      if (!text) {
        throw new Error('Empty response from server');
      }
      return JSON.parse(text);
    })
    .then(data => {
      let html = '';
      if (data.LastPhrases && data.LastPhrases.length > 0) {
        html += `<div><b>Последний индекс:</b> ${data.LastSavedIndex}</div>`;
        html += '<ol>';
        for (let phrase of data.LastPhrases) {
          html += `<li style="font-family:monospace;font-size:13px;">${phrase}</li>`;
        }
        html += '</ol>';
      } else {
        html = 'Нет данных.';
      }
      document.getElementById('currentPhrasesBlock').innerHTML = html;
    })
    .catch(error => {
      console.error('Error updating current phrases:', error);
      document.getElementById('currentPhrasesBlock').innerHTML = 'Ошибка получения данных.';
    });
}

function updateLiveLog() {
  console.log('[LIVE-LOG] Starting updateLiveLog...');
  fetch('/api/task/live-log')
    .then(async response => {
      console.log('[LIVE-LOG] Response status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      const text = await response.text();
      console.log('[LIVE-LOG] Response text length:', text.length);
      if (!text) {
        throw new Error('Empty response from server');
      }
      return JSON.parse(text);
    })
    .then(data => {
      console.log('[LIVE-LOG] Parsed data:', data);
      console.log('[LIVE-LOG] Success field:', data.success);
      console.log('[LIVE-LOG] Phrases field:', data.phrases);
      console.log('[LIVE-LOG] Phrases length:', data.phrases ? data.phrases.length : 'undefined');
      
      if (data.success && data.phrases && Array.isArray(data.phrases)) {
        const container = document.getElementById('liveLogContainer');
        const countBadge = document.getElementById('phraseCount');
        const speedBadge = document.getElementById('speedBadge');

        // Фильтруем только обработанные фразы (статус "checked" или "found")
        const processedPhrases = data.phrases.filter(item => 
          item.status === 'checked' || item.status === 'found' || item.status === 'valid' || item.status === 'invalid'
        );
        
        // Отображаем последние 50 обработанных записей
        const phrases = processedPhrases.slice(-50);
        console.log('[LIVE-LOG] Processed phrases count:', phrases.length);
        countBadge.textContent = phrases.length;

        // Рассчитываем скорость
        const currentTime = new Date().getTime();
        const timeDiff = currentTime - (data.lastTimestamp || 0);
        const phrasesProcessed = data.processedCombinations || data.processedCombinations || 0;
        const speed = timeDiff > 0 ? (phrasesProcessed / timeDiff) * 1000 : 0;
        speedBadge.textContent = `${speed.toFixed(0)} фраз/сек`;

        if (phrases.length > 0) {
          console.log('[LIVE-LOG] First processed phrase:', phrases[0]);
          let html = '<div class="table-responsive"><table class="table table-sm table-striped">';
          html += '<thead><tr><th>Время</th><th>Индекс</th><th>Фраза</th><th>Адрес</th><th>Статус</th></tr></thead><tbody>';
          
          phrases.forEach(item => {
            const time = new Date(item.timestamp).toLocaleTimeString();
            const statusColor = getStatusColor(item.status);
            const statusText = getStatusText(item.status);
            const isValid = item.isValid !== undefined && item.isValid !== null ? 
              (item.isValid ? '✅' : '❌') : '';
            
            html += `<tr>
              <td class="text-muted small">${time}</td>
              <td class="text-primary">${item.entryIndex || item.index || '-'}</td>
              <td class="font-monospace small">${item.phrase}</td>
              <td class="text-success small">${item.address || '-'}</td>
              <td><span class="${statusColor}">${statusText}</span> ${isValid}</td>
            </tr>`;
          });
          
          html += '</tbody></table></div>';
          container.innerHTML = html;
          console.log('[LIVE-LOG] Table HTML generated and set to container');
        } else {
          console.log('[LIVE-LOG] No processed phrases, showing waiting message');
          container.innerHTML = '<p class="text-muted">Ожидание обработанных данных...</p>';
        }
        container.scrollTop = container.scrollHeight;
      } else {
        console.log('[LIVE-LOG] Data not successful or no phrases:', data);
        console.log('[LIVE-LOG] Success:', data.success);
        console.log('[LIVE-LOG] Phrases type:', typeof data.phrases);
        console.log('[LIVE-LOG] Phrases is array:', Array.isArray(data.phrases));
      }
    })
    .catch(error => {
      console.error('[LIVE-LOG] Error updating live log:', error);
      document.getElementById('liveLogContainer').innerHTML = '<p class="text-danger">Ошибка получения данных.</p>';
    });
}

function getStatusColor(status) {
  switch(status) {
    case 'processing': return 'text-warning';
    case 'checked': return 'text-info';
    case 'found': return 'text-success';
    case 'valid': return 'text-success';
    case 'invalid': return 'text-danger';
    default: return 'text-secondary';
  }
}

function getStatusText(status) {
  switch(status) {
    case 'processing': return 'Обработка';
    case 'checked': return 'Проверено';
    case 'found': return 'НАЙДЕНО!';
    case 'valid': return 'Валидно';
    case 'invalid': return 'Невалидно';
    default: return status;
  }
}

function clearLiveLog() {
  document.getElementById('liveLogContainer').innerHTML = '<p class="text-muted">Обработанные фразы очищены...</p>';
  document.getElementById('phraseCount').textContent = '0';
  document.getElementById('speedBadge').textContent = '0 фраз/сек';
}

// Обновляем данные каждые 1-2 секунды
console.log('[LIVE-LOG] Setting up intervals...');
setInterval(updateCurrentPhrases, 3000);
setInterval(updateLiveLog, 1000); // Частое обновление для детального лайв журнала

// Инициализация
console.log('[LIVE-LOG] Initializing...');
updateCurrentPhrases();
updateLiveLog();
</script> 